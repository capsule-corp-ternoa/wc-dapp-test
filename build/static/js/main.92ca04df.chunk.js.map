{"version":3,"sources":["contexts/ChainDataContext.tsx","helpers/solana.ts","helpers/namespaces.ts","contexts/ClientContext.tsx","helpers/utilities.ts","helpers/eip1271.ts","contexts/JsonRpcContext.tsx","chains/solana.ts","constants/default.ts","constants/logo.ts","helpers/api.ts","helpers/eip712.ts","helpers/tx.ts","assets/walletconnect.png","components/Banner.tsx","components/Icon.tsx","assets/eth.svg","assets/erc20.svg","chains/eip155.ts","chains/cosmos.ts","chains/polkadot.ts","chains/index.ts","components/Asset.tsx","styles.ts","components/Loader.tsx","components/Button.tsx","components/Column.tsx","components/Blockchain.tsx","components/Header.tsx","components/Modal.tsx","components/Toggle.tsx","components/shared/index.ts","modals/shared/index.ts","modals/RequestModal.tsx","components/Peer.tsx","components/Pairing.tsx","modals/PairingModal.tsx","modals/PingModal.tsx","components/Wrapper.tsx","components/app/index.tsx","App.tsx","index.tsx"],"names":["ChainDataContext","createContext","ChainDataContextProvider","children","useState","chainData","setChainData","loadChainData","a","namespaces","getAllChainNamespaces","Promise","all","map","namespace","chains","SolanaChainData","apiGetChainNamespace","useEffect","Provider","value","useChainData","context","useContext","undefined","Error","getPublicKeysFromAccounts","accounts","filter","account","startsWith","reduce","address","split","pop","PublicKey","getSupportedMethodsByNamespace","Object","values","DEFAULT_EIP155_METHODS","DEFAULT_COSMOS_METHODS","DEFAULT_SOLANA_METHODS","DEFAULT_POLKADOT_METHODS","getSupportedEventsByNamespace","DEFAULT_EIP_155_EVENTS","DEFAULT_COSMOS_EVENTS","DEFAULT_SOLANA_EVENTS","DEFAULT_POLKADOT_EVENTS","getRequiredNamespaces","selectedNamespaces","supportedNamespaces","forEach","chainId","includes","push","getNamespacesFromChains","console","log","fromEntries","methods","chain","events","ClientContext","ClientContextProvider","client","setClient","pairings","setPairings","session","setSession","isFetchingBalances","setIsFetchingBalances","isInitializing","setIsInitializing","balances","setBalances","setAccounts","solanaPublicKeys","setSolanaPublicKeys","setChains","reset","getAccountBalances","_accounts","reference","apiGetAccountBalance","assets","arr","error","onSessionConnected","useCallback","_session","allNamespaceAccounts","flat","allNamespaceChains","keys","connect","pairing","topic","requiredNamespaces","pairingTopic","uri","approval","QRCodeModal","open","close","disconnect","reason","ERROR","USER_DISCONNECTED","format","_subscribeToEvents","_client","on","args","params","get","updatedSession","_checkPersistedState","length","lastKeyIndex","createClient","Client","init","logger","DEFAULT_LOGGER","relayUrl","DEFAULT_RELAY_URL","projectId","DEFAULT_PROJECT_ID","metadata","getAppMetadata","DEFAULT_APP_METADATA","useMemo","useWalletConnectClient","ellipseAddress","width","slice","convertHexToNumber","hex","encoding","e","convertHexToUtf8","sanitizeDecimals","decimals","integer","fractional","_fractional","substring","replace","join","toWad","amount","utils","parseUnits","fromWad","wad","formatUnits","LOCALSTORAGE_KEY_TESTNET","setLocaleStorageTestnetFlag","window","localStorage","setItem","getLocalStorageTestnetFlag","persisted","getItem","DEFAULT_CHAINS","sig","data","provider","abi","eip1271","spec","magicValue","Contract","isValidSignature","arrayify","returnValue","toLowerCase","constant","inputs","name","type","outputs","payable","stateMutability","JsonRpcContext","JsonRpcContextProvider","pending","setPending","result","setResult","isTestnet","setIsTestnet","_createJsonRpcRequestHandler","rpcRequest","valid","message","_verifyEip155MessageSignature","signature","verifyMessage","ping","method","ethereumRpc","testSendTransaction","caipAccountAddress","find","formatTestTransaction","tx","BigNumber","from","balance","lt","gasPrice","mul","gasLimit","ETH_SEND_TRANSACTION","request","testSignTransaction","ETH_SIGN_TRANSACTION","signedTx","EthTransaction","fromSerializedTx","verifySignature","testSignPersonalMessage","Date","now","hexMsg","PERSONAL_SIGN","testEthSign","ETH_SIGN","testSignTypedData","JSON","stringify","eip712","example","ETH_SIGN_TYPED_DATA","types","EIP712Domain","nonDomainTypes","verifyTypedData","domain","cosmosRpc","testSignDirect","fee","denom","pubkey","accountNumber","sequence","bodyBytes","authInfoBytes","signDoc","formatDirectSignDoc","signerAddress","stringifySignDocValues","COSMOS_SIGN_DIRECT","verifyDirectSignature","testSignAmino","msgs","gas","chain_id","memo","account_number","COSMOS_SIGN_AMINO","verifyAminoSignature","solanaRpc","senderPublicKey","connection","Connection","clusterApiUrl","getRecentBlockhash","blockhash","transaction","SolanaTransaction","feePayer","recentBlockhash","add","SystemProgram","transfer","fromPubkey","toPubkey","Keypair","generate","publicKey","lamports","SOL_SIGN_TRANSACTION","toBase58","instructions","i","programId","bs58","encode","k","isSigner","isWritable","addSignature","Buffer","decode","verifySignatures","testSignMessage","TextEncoder","SOL_SIGN_MESSAGE","verifyMessageSignature","polkadotRcp","POLKADOT_SIGN_MESSAGE","pubKey","rpcResult","isRpcRequestPending","useJsonRpc","id","rpc","slip44","testnet","SolanaMetadata","logo","rgb","getChainMetadata","DEFAULT_MAIN_CHAINS","DEFAULT_TEST_CHAINS","process","description","url","icons","BLOCKCHAIN_LOGO_BASE_URL","ethereumApi","axios","create","baseURL","timeout","headers","Accept","ethChainId","response","apiGetAccountNonce","apiGetGasPrices","Person","Mail","primaryType","version","verifyingContract","wallet","to","contents","getGasPrice","toHexString","gasPrices","slow","price","_nonce","nonce","_gasPrice","SBannerWrapper","styled","div","SBanner","Banner","SIcon","img","size","Icon","props","src","fallback","onError","event","target","defaultProps","EIP155Colors","EIP155Metadata","CosmosMetadata","PolkadotMetadata","eip155","cosmos","polkadot","solana","xdai","matic","SAsset","SAssetLeft","SAssetName","SAssetRight","SAssetBalance","getAssetIcon","asset","contractAddress","erc20","symbol","eth","Asset","colors","white","black","dark","grey","darkGrey","lightGrey","blue","lightBlue","yellow","orange","green","pink","red","purple","fonts","tiny","small","medium","large","h1","h2","h3","h4","h5","h6","normal","semibold","bold","extrabold","transitions","shadows","globalStyle","OpenSans","load","keyframes","SLoader","svg","Loader","color","viewBox","stroke","strokeWidth","fill","fillRule","d","x","y","height","rx","SHoverLayer","SButton","button","outline","icon","left","disabled","Button","fetching","SColumn","spanHeight","maxWidth","center","Column","SAccount","SChain","SContainer","SFullWidthContainer","SAction","SBlockchainChildrenContainer","Blockchain","onClick","active","actions","meta","getBlockchainDisplayData","Fragment","className","alt","action","callback","SHeader","SHeaderActions","SActiveAccount","SActiveSession","Header","peer","SLightbox","offset","opacity","alpha","show","SModalContainer","SHitbox","SCloseButton","SCard","SModalContent","Modal","closeModal","setOffset","lightboxRef","useRef","current","lightboxRect","getBoundingClientRect","nextOffset","top","ref","SToggle","Toggle","STable","SRow","SKey","SValue","SModalTitle","SModalParagraph","p","RequestModal","key","toString","SPeerOneLiner","SPeerCard","SCenter","SUrl","SName","Peer","oneLiner","SPairingContainer","Pairing","peerMetadata","PairingModal","PingModal","fadeIn","SWrapper","Wrapper","SLayout","SContent","SLanding","SButtonContainer","SConnectButton","SAccountsContainer","SToggleContainer","SAccounts","App","modal","setModal","openRequestModal","onConnect","onPing","getBlockchainActions","onSendTransaction","onSignTransaction","onSignPersonalMessage","onEthSign","onSignTypedData","getEthereumActions","onSignDirect","onSignAmino","getCosmosActions","onSignMessage","getSolanaActions","getPolkadotActions","toggleTestnets","nextIsTestnetState","handleChainSelectionClick","chainOptions","renderContent","renderModal","GlobalStyle","createGlobalStyle","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.92ca04df.chunk.js","sourcesContent":["import { apiGetChainNamespace, ChainsMap } from \"caip-api\";\nimport { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\nimport { SolanaChainData } from \"../chains/solana\";\n\nimport { ChainNamespaces, getAllChainNamespaces } from \"../helpers\";\n\n/**\n * Types\n */\ninterface IContext {\n  chainData: ChainNamespaces;\n}\n\n/**\n * Context\n */\nexport const ChainDataContext = createContext<IContext>({} as IContext);\n\n/**\n * Provider\n */\nexport function ChainDataContextProvider({ children }: { children: ReactNode | ReactNode[] }) {\n  const [chainData, setChainData] = useState<ChainNamespaces>({});\n\n  const loadChainData = async () => {\n    const namespaces = getAllChainNamespaces();\n    const chainData: ChainNamespaces = {};\n    await Promise.all(\n      namespaces.map(async namespace => {\n        let chains: ChainsMap | undefined;\n        try {\n          if (namespace === \"solana\") {\n            chains = SolanaChainData;\n          } else {\n            chains = await apiGetChainNamespace(namespace);\n          }\n        } catch (e) {\n          // ignore error\n        }\n        if (typeof chains !== \"undefined\") {\n          chainData[namespace] = chains;\n        }\n      }),\n    );\n\n    setChainData(chainData);\n  };\n\n  useEffect(() => {\n    loadChainData();\n  }, []);\n\n  return (\n    <ChainDataContext.Provider\n      value={{\n        chainData,\n      }}\n    >\n      {children}\n    </ChainDataContext.Provider>\n  );\n}\n\nexport function useChainData() {\n  const context = useContext(ChainDataContext);\n  if (context === undefined) {\n    throw new Error(\"useChainData must be used within a ChainDataContextProvider\");\n  }\n  return context;\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nexport function getPublicKeysFromAccounts(accounts: string[]) {\n  return (\n    accounts\n      // Filter out any non-solana accounts.\n      .filter(account => account.startsWith(\"solana:\"))\n      // Create a map of Solana address -> publicKey.\n      .reduce((map: Record<string, PublicKey>, account) => {\n        const address = account.split(\":\").pop();\n        if (!address) {\n          throw new Error(`Could not derive Solana address from CAIP account: ${account}`);\n        }\n        map[address] = new PublicKey(address);\n        return map;\n      }, {})\n  );\n}\n","import { ProposalTypes } from \"@walletconnect/types\";\nimport {\n  DEFAULT_COSMOS_EVENTS,\n  DEFAULT_COSMOS_METHODS,\n  DEFAULT_EIP155_METHODS,\n  DEFAULT_EIP_155_EVENTS,\n  DEFAULT_POLKADOT_EVENTS,\n  DEFAULT_POLKADOT_METHODS,\n  DEFAULT_SOLANA_EVENTS,\n  DEFAULT_SOLANA_METHODS,\n} from \"../constants\";\n\nexport const getNamespacesFromChains = (chains: string[]) => {\n  const supportedNamespaces: string[] = [];\n  chains.forEach(chainId => {\n    const [namespace] = chainId.split(\":\");\n    if (!supportedNamespaces.includes(namespace)) {\n      supportedNamespaces.push(namespace);\n    }\n  });\n\n  return supportedNamespaces;\n};\n\nexport const getSupportedMethodsByNamespace = (namespace: string) => {\n  switch (namespace) {\n    case \"eip155\":\n      return Object.values(DEFAULT_EIP155_METHODS);\n    case \"cosmos\":\n      return Object.values(DEFAULT_COSMOS_METHODS);\n    case \"solana\":\n      return Object.values(DEFAULT_SOLANA_METHODS);\n    case \"polkadot\":\n      return Object.values(DEFAULT_POLKADOT_METHODS);\n    default:\n      throw new Error(`No default methods for namespace: ${namespace}`);\n  }\n};\n\nexport const getSupportedEventsByNamespace = (namespace: string) => {\n  switch (namespace) {\n    case \"eip155\":\n      return Object.values(DEFAULT_EIP_155_EVENTS);\n    case \"cosmos\":\n      return Object.values(DEFAULT_COSMOS_EVENTS);\n    case \"solana\":\n      return Object.values(DEFAULT_SOLANA_EVENTS);\n    case \"polkadot\":\n      return Object.values(DEFAULT_POLKADOT_EVENTS);\n    default:\n      throw new Error(`No default events for namespace: ${namespace}`);\n  }\n};\n\nexport const getRequiredNamespaces = (chains: string[]): ProposalTypes.RequiredNamespaces => {\n  const selectedNamespaces = getNamespacesFromChains(chains);\n  console.log(\"selected namespaces:\", selectedNamespaces);\n\n  return Object.fromEntries(\n    selectedNamespaces.map(namespace => [\n      namespace,\n      {\n        methods: getSupportedMethodsByNamespace(namespace),\n        chains: chains.filter(chain => chain.startsWith(namespace)),\n        events: getSupportedEventsByNamespace(namespace) as any[],\n      },\n    ]),\n  );\n};\n","import Client from \"@walletconnect/sign-client\";\nimport { PairingTypes, SessionTypes } from \"@walletconnect/types\";\nimport QRCodeModal from \"@walletconnect/legacy-modal\";\nimport {\n  createContext,\n  ReactNode,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nimport {\n  DEFAULT_APP_METADATA,\n  DEFAULT_LOGGER,\n  DEFAULT_PROJECT_ID,\n  DEFAULT_RELAY_URL,\n} from \"../constants\";\nimport { AccountBalances, apiGetAccountBalance } from \"../helpers\";\nimport { ERROR, getAppMetadata } from \"@walletconnect/utils\";\nimport { getPublicKeysFromAccounts } from \"../helpers/solana\";\nimport { getRequiredNamespaces } from \"../helpers/namespaces\";\n\n/**\n * Types\n */\ninterface IContext {\n  client: Client | undefined;\n  session: SessionTypes.Struct | undefined;\n  connect: (pairing?: { topic: string }) => Promise<void>;\n  disconnect: () => Promise<void>;\n  isInitializing: boolean;\n  chains: string[];\n  pairings: PairingTypes.Struct[];\n  accounts: string[];\n  solanaPublicKeys?: Record<string, PublicKey>;\n  balances: AccountBalances;\n  isFetchingBalances: boolean;\n  setChains: any;\n}\n\n/**\n * Context\n */\nexport const ClientContext = createContext<IContext>({} as IContext);\n\n/**\n * Provider\n */\nexport function ClientContextProvider({ children }: { children: ReactNode | ReactNode[] }) {\n  const [client, setClient] = useState<Client>();\n  const [pairings, setPairings] = useState<PairingTypes.Struct[]>([]);\n  const [session, setSession] = useState<SessionTypes.Struct>();\n\n  const [isFetchingBalances, setIsFetchingBalances] = useState(false);\n  const [isInitializing, setIsInitializing] = useState(false);\n\n  const [balances, setBalances] = useState<AccountBalances>({});\n  const [accounts, setAccounts] = useState<string[]>([]);\n  const [solanaPublicKeys, setSolanaPublicKeys] = useState<Record<string, PublicKey>>();\n  const [chains, setChains] = useState<string[]>([]);\n\n  const reset = () => {\n    setPairings([]);\n    setSession(undefined);\n    setBalances({});\n    setAccounts([]);\n    setChains([]);\n  };\n\n  const getAccountBalances = async (_accounts: string[]) => {\n    setIsFetchingBalances(true);\n    try {\n      const arr = await Promise.all(\n        _accounts.map(async account => {\n          const [namespace, reference, address] = account.split(\":\");\n          const chainId = `${namespace}:${reference}`;\n          const assets = await apiGetAccountBalance(address, chainId);\n          return { account, assets: [assets] };\n        }),\n      );\n\n      const balances: AccountBalances = {};\n      arr.forEach(({ account, assets }) => {\n        balances[account] = assets;\n      });\n      setBalances(balances);\n    } catch (e) {\n      console.error(e);\n    } finally {\n      setIsFetchingBalances(false);\n    }\n  };\n\n  const onSessionConnected = useCallback(async (_session: SessionTypes.Struct) => {\n    const allNamespaceAccounts = Object.values(_session.namespaces)\n      .map(namespace => namespace.accounts)\n      .flat();\n    const allNamespaceChains = Object.keys(_session.namespaces);\n\n    setSession(_session);\n    setChains(allNamespaceChains);\n    setAccounts(allNamespaceAccounts);\n    setSolanaPublicKeys(getPublicKeysFromAccounts(allNamespaceAccounts));\n    await getAccountBalances(allNamespaceAccounts);\n  }, []);\n\n  const connect = useCallback(\n    async pairing => {\n      if (typeof client === \"undefined\") {\n        throw new Error(\"WalletConnect is not initialized\");\n      }\n      console.log(\"connect, pairing topic is:\", pairing?.topic);\n      try {\n        const requiredNamespaces = getRequiredNamespaces(chains);\n        console.log(\"requiredNamespaces config for connect:\", requiredNamespaces);\n\n        const { uri, approval } = await client.connect({\n          pairingTopic: pairing?.topic,\n          requiredNamespaces,\n        });\n\n        // Open QRCode modal if a URI was returned (i.e. we're not connecting an existing pairing).\n        if (uri) {\n          QRCodeModal.open(uri, () => {\n            console.log(\"EVENT\", \"QR Code Modal closed\");\n          });\n        }\n\n        const session = await approval();\n        console.log(\"Established session:\", session);\n        await onSessionConnected(session);\n      } catch (e) {\n        console.error(e);\n        // ignore rejection\n      } finally {\n        // close modal in case it was open\n        QRCodeModal.close();\n      }\n    },\n    [chains, client, onSessionConnected],\n  );\n\n  const disconnect = useCallback(async () => {\n    if (typeof client === \"undefined\") {\n      throw new Error(\"WalletConnect is not initialized\");\n    }\n    if (typeof session === \"undefined\") {\n      throw new Error(\"Session is not connected\");\n    }\n    await client.disconnect({\n      topic: session.topic,\n      reason: ERROR.USER_DISCONNECTED.format(),\n    });\n    // Reset app state after disconnect.\n    reset();\n  }, [client, session]);\n\n  const _subscribeToEvents = useCallback(\n    async (_client: Client) => {\n      if (typeof _client === \"undefined\") {\n        throw new Error(\"WalletConnect is not initialized\");\n      }\n\n      _client.on(\"session_ping\", args => {\n        console.log(\"EVENT\", \"session_ping\", args);\n      });\n\n      _client.on(\"session_event\", args => {\n        console.log(\"EVENT\", \"session_event\", args);\n      });\n\n      _client.on(\"session_update\", ({ topic, params }) => {\n        console.log(\"EVENT\", \"session_update\", { topic, params });\n        const { namespaces } = params;\n        const _session = _client.session.get(topic);\n        const updatedSession = { ..._session, namespaces };\n        onSessionConnected(updatedSession);\n      });\n\n      _client.on(\"session_delete\", () => {\n        console.log(\"EVENT\", \"session_delete\");\n        reset();\n      });\n    },\n    [onSessionConnected],\n  );\n\n  const _checkPersistedState = useCallback(\n    async (_client: Client) => {\n      if (typeof _client === \"undefined\") {\n        throw new Error(\"WalletConnect is not initialized\");\n      }\n      // populates existing pairings to state\n      setPairings(_client.pairing.values);\n      console.log(\"RESTORED PAIRINGS: \", _client.pairing.values);\n\n      if (typeof session !== \"undefined\") return;\n      // populates (the last) existing session to state\n      if (_client.session.length) {\n        const lastKeyIndex = _client.session.keys.length - 1;\n        const _session = _client.session.get(_client.session.keys[lastKeyIndex]);\n        console.log(\"RESTORED SESSION:\", _session);\n        await onSessionConnected(_session);\n        return _session;\n      }\n    },\n    [session, onSessionConnected],\n  );\n\n  const createClient = useCallback(async () => {\n    try {\n      setIsInitializing(true);\n\n      const _client = await Client.init({\n        logger: DEFAULT_LOGGER,\n        relayUrl: DEFAULT_RELAY_URL,\n        projectId: DEFAULT_PROJECT_ID,\n        metadata: getAppMetadata() || DEFAULT_APP_METADATA,\n      });\n\n      console.log(\"CREATED CLIENT: \", _client);\n      setClient(_client);\n      await _subscribeToEvents(_client);\n      await _checkPersistedState(_client);\n    } catch (err) {\n      throw err;\n    } finally {\n      setIsInitializing(false);\n    }\n  }, [_checkPersistedState, _subscribeToEvents]);\n\n  useEffect(() => {\n    if (!client) {\n      createClient();\n    }\n  }, [client, createClient]);\n\n  const value = useMemo(\n    () => ({\n      pairings,\n      isInitializing,\n      balances,\n      isFetchingBalances,\n      accounts,\n      solanaPublicKeys,\n      chains,\n      client,\n      session,\n      connect,\n      disconnect,\n      setChains,\n    }),\n    [\n      pairings,\n      isInitializing,\n      balances,\n      isFetchingBalances,\n      accounts,\n      solanaPublicKeys,\n      chains,\n      client,\n      session,\n      connect,\n      disconnect,\n      setChains,\n    ],\n  );\n\n  return (\n    <ClientContext.Provider\n      value={{\n        ...value,\n      }}\n    >\n      {children}\n    </ClientContext.Provider>\n  );\n}\n\nexport function useWalletConnectClient() {\n  const context = useContext(ClientContext);\n  if (context === undefined) {\n    throw new Error(\"useWalletConnectClient must be used within a ClientContextProvider\");\n  }\n  return context;\n}\n","import { BigNumber, BigNumberish, providers, utils } from \"ethers\";\nimport * as encoding from \"@walletconnect/encoding\";\nimport { TypedDataUtils } from \"eth-sig-util\";\nimport * as ethUtil from \"ethereumjs-util\";\n\nimport { eip1271 } from \"./eip1271\";\nimport { DEFAULT_CHAINS } from \"../constants\";\n\nexport function capitalize(string: string): string {\n  return string\n    .split(\" \")\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n    .join(\" \");\n}\n\nexport function ellipseText(text = \"\", maxLength = 9999): string {\n  if (text.length <= maxLength) {\n    return text;\n  }\n  const _maxLength = maxLength - 3;\n  let ellipse = false;\n  let currentLength = 0;\n  const result =\n    text\n      .split(\" \")\n      .filter(word => {\n        currentLength += word.length;\n        if (ellipse || currentLength >= _maxLength) {\n          ellipse = true;\n          return false;\n        } else {\n          return true;\n        }\n      })\n      .join(\" \") + \"...\";\n  return result;\n}\n\nexport function ellipseAddress(address = \"\", width = 10): string {\n  return `${address.slice(0, width)}...${address.slice(-width)}`;\n}\n\nexport function getDataString(func: string, arrVals: any[]): string {\n  let val = \"\";\n  for (let i = 0; i < arrVals.length; i++) {\n    val += encoding.padLeft(arrVals[i], 64);\n  }\n  const data = func + val;\n  return data;\n}\n\nexport function isMobile(): boolean {\n  let mobile = false;\n\n  function hasTouchEvent(): boolean {\n    try {\n      document.createEvent(\"TouchEvent\");\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function hasMobileUserAgent(): boolean {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(\n        navigator.userAgent,\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\n        navigator.userAgent.substr(0, 4),\n      )\n    ) {\n      return true;\n    } else if (hasTouchEvent()) {\n      return true;\n    }\n    return false;\n  }\n\n  mobile = hasMobileUserAgent();\n\n  return mobile;\n}\n\nexport function encodePersonalMessage(msg: string): string {\n  const data = encoding.utf8ToBuffer(msg);\n  const buf = Buffer.concat([\n    Buffer.from(\"\\u0019Ethereum Signed Message:\\n\" + data.length.toString(), \"utf8\"),\n    data,\n  ]);\n  return ethUtil.bufferToHex(buf);\n}\n\nexport function hashPersonalMessage(msg: string): string {\n  const data = encodePersonalMessage(msg);\n  const buf = ethUtil.toBuffer(data);\n  const hash = ethUtil.keccak256(buf);\n  return ethUtil.bufferToHex(hash);\n}\n\nexport function encodeTypedDataMessage(msg: string): string {\n  const data = TypedDataUtils.sanitizeData(JSON.parse(msg));\n  const buf = Buffer.concat([\n    Buffer.from(\"1901\", \"hex\"),\n    TypedDataUtils.hashStruct(\"EIP712Domain\", data.domain, data.types),\n    TypedDataUtils.hashStruct(data.primaryType as string, data.message, data.types),\n  ]);\n  return ethUtil.bufferToHex(buf);\n}\n\nexport function hashTypedDataMessage(msg: string): string {\n  const data = encodeTypedDataMessage(msg);\n  const buf = ethUtil.toBuffer(data);\n  const hash = ethUtil.keccak256(buf);\n  return ethUtil.bufferToHex(hash);\n}\n\nexport function recoverAddress(sig: string, hash: string): string {\n  const params = ethUtil.fromRpcSig(sig);\n  const result = ethUtil.ecrecover(ethUtil.toBuffer(hash), params.v, params.r, params.s);\n  const signer = ethUtil.bufferToHex(ethUtil.publicToAddress(result));\n  return signer;\n}\n\nexport function recoverPersonalSignature(sig: string, msg: string): string {\n  const hash = hashPersonalMessage(msg);\n  const signer = recoverAddress(sig, hash);\n  return signer;\n}\n\nexport function recoverTypedMessage(sig: string, msg: string): string {\n  const hash = hashTypedDataMessage(msg);\n  const signer = recoverAddress(sig, hash);\n  return signer;\n}\n\nexport async function verifySignature(\n  address: string,\n  sig: string,\n  hash: string,\n  rpcUrl: string,\n): Promise<boolean> {\n  const provider = new providers.JsonRpcProvider(rpcUrl);\n  const bytecode = await provider.getCode(address);\n  if (!bytecode || bytecode === \"0x\" || bytecode === \"0x0\" || bytecode === \"0x00\") {\n    const signer = recoverAddress(sig, hash);\n    return signer.toLowerCase() === address.toLowerCase();\n  } else {\n    return eip1271.isValidSignature(address, sig, hash, provider);\n  }\n}\n\nexport function convertHexToNumber(hex: string) {\n  try {\n    return encoding.hexToNumber(hex);\n  } catch (e) {\n    return hex;\n  }\n}\n\nexport function convertHexToUtf8(hex: string) {\n  try {\n    return encoding.hexToUtf8(hex);\n  } catch (e) {\n    return hex;\n  }\n}\n\nexport const sanitizeDecimals = (value: string, decimals = 18): string => {\n  const [integer, fractional] = value.split(\".\");\n  const _fractional = fractional\n    ? fractional.substring(0, decimals).replace(/0+$/gi, \"\")\n    : undefined;\n  return _fractional ? [integer, _fractional].join(\".\") : integer;\n};\n\nexport const toWad = (amount: string, decimals = 18): BigNumber => {\n  return utils.parseUnits(sanitizeDecimals(amount, decimals), decimals);\n};\n\nexport const fromWad = (wad: BigNumberish, decimals = 18): string => {\n  return sanitizeDecimals(utils.formatUnits(wad, decimals), decimals);\n};\n\nexport const LOCALSTORAGE_KEY_TESTNET = \"TESTNET\";\nexport const INITIAL_STATE_TESTNET_DEFAULT = true;\n\nexport function setLocaleStorageTestnetFlag(value: boolean): void {\n  window.localStorage.setItem(LOCALSTORAGE_KEY_TESTNET, `${value}`);\n}\n\nexport function getLocalStorageTestnetFlag(): boolean {\n  let value = INITIAL_STATE_TESTNET_DEFAULT;\n  const persisted = window.localStorage.getItem(LOCALSTORAGE_KEY_TESTNET);\n  if (!persisted) {\n    setLocaleStorageTestnetFlag(value);\n  } else {\n    value = persisted === \"true\" ? true : false;\n  }\n  return value;\n}\n\nexport const getAllChainNamespaces = () => {\n  const namespaces: string[] = [];\n  DEFAULT_CHAINS.forEach(chainId => {\n    const [namespace] = chainId.split(\":\");\n    if (!namespaces.includes(namespace)) {\n      namespaces.push(namespace);\n    }\n  });\n  return namespaces;\n};\n","import { Contract, providers, utils } from \"ethers\";\n\nconst spec = {\n  magicValue: \"0x1626ba7e\",\n  abi: [\n    {\n      constant: true,\n      inputs: [\n        {\n          name: \"_hash\",\n          type: \"bytes32\",\n        },\n        {\n          name: \"_sig\",\n          type: \"bytes\",\n        },\n      ],\n      name: \"isValidSignature\",\n      outputs: [\n        {\n          name: \"magicValue\",\n          type: \"bytes4\",\n        },\n      ],\n      payable: false,\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n  ],\n};\n\nasync function isValidSignature(\n  address: string,\n  sig: string,\n  data: string,\n  provider: providers.Provider,\n  abi = eip1271.spec.abi,\n  magicValue = eip1271.spec.magicValue,\n): Promise<boolean> {\n  let returnValue;\n  try {\n    returnValue = await new Contract(address, abi, provider).isValidSignature(\n      utils.arrayify(data),\n      sig,\n    );\n  } catch (e) {\n    return false;\n  }\n  return returnValue.toLowerCase() === magicValue.toLowerCase();\n}\n\nexport const eip1271 = {\n  spec,\n  isValidSignature,\n};\n","import { BigNumber, utils } from \"ethers\";\nimport { createContext, ReactNode, useContext, useState } from \"react\";\nimport * as encoding from \"@walletconnect/encoding\";\nimport { TypedDataField } from \"@ethersproject/abstract-signer\";\nimport { Transaction as EthTransaction } from \"@ethereumjs/tx\";\nimport {\n  formatDirectSignDoc,\n  stringifySignDocValues,\n  verifyAminoSignature,\n  verifyDirectSignature,\n} from \"cosmos-wallet\";\nimport bs58 from \"bs58\";\nimport { verifyMessageSignature } from \"solana-wallet\";\nimport {\n  clusterApiUrl,\n  Connection,\n  Keypair,\n  SystemProgram,\n  Transaction as SolanaTransaction,\n} from \"@solana/web3.js\";\n\nimport {\n  eip712,\n  formatTestTransaction,\n  getLocalStorageTestnetFlag,\n} from \"../helpers\";\nimport { useWalletConnectClient } from \"./ClientContext\";\nimport {\n  DEFAULT_COSMOS_METHODS,\n  DEFAULT_EIP155_METHODS,\n  DEFAULT_POLKADOT_METHODS,\n  DEFAULT_SOLANA_METHODS,\n} from \"../constants\";\nimport { useChainData } from \"./ChainDataContext\";\n\n/**\n * Types\n */\ninterface IFormattedRpcResponse {\n  method?: string;\n  address?: string;\n  valid: boolean;\n  result: string;\n}\n\ntype TRpcRequestCallback = (chainId: string, address: string) => Promise<void>;\n\ninterface IContext {\n  ping: () => Promise<void>;\n  ethereumRpc: {\n    testSendTransaction: TRpcRequestCallback;\n    testSignTransaction: TRpcRequestCallback;\n    testEthSign: TRpcRequestCallback;\n    testSignPersonalMessage: TRpcRequestCallback;\n    testSignTypedData: TRpcRequestCallback;\n  };\n  cosmosRpc: {\n    testSignDirect: TRpcRequestCallback;\n    testSignAmino: TRpcRequestCallback;\n  };\n  solanaRpc: {\n    testSignMessage: TRpcRequestCallback;\n    testSignTransaction: TRpcRequestCallback;\n  };\n  polkadotRcp: {\n    testSignMessage: TRpcRequestCallback;\n  };\n  rpcResult?: IFormattedRpcResponse | null;\n  isRpcRequestPending: boolean;\n  isTestnet: boolean;\n  setIsTestnet: (isTestnet: boolean) => void;\n}\n\n/**\n * Context\n */\nexport const JsonRpcContext = createContext<IContext>({} as IContext);\n\n/**\n * Provider\n */\nexport function JsonRpcContextProvider({\n  children,\n}: {\n  children: ReactNode | ReactNode[];\n}) {\n  const [pending, setPending] = useState(false);\n  const [result, setResult] = useState<IFormattedRpcResponse | null>();\n  const [isTestnet, setIsTestnet] = useState(getLocalStorageTestnetFlag());\n\n  const { client, session, accounts, balances, solanaPublicKeys } =\n    useWalletConnectClient();\n\n  const { chainData } = useChainData();\n\n  const _createJsonRpcRequestHandler =\n    (\n      rpcRequest: (\n        chainId: string,\n        address: string\n      ) => Promise<IFormattedRpcResponse>\n    ) =>\n    async (chainId: string, address: string) => {\n      if (typeof client === \"undefined\") {\n        throw new Error(\"WalletConnect is not initialized\");\n      }\n      if (typeof session === \"undefined\") {\n        throw new Error(\"Session is not connected\");\n      }\n\n      try {\n        setPending(true);\n        const result = await rpcRequest(chainId, address);\n        setResult(result);\n      } catch (err: any) {\n        console.error(\"RPC request failed: \", err);\n        setResult({\n          address,\n          valid: false,\n          result: err?.message ?? err,\n        });\n      } finally {\n        setPending(false);\n      }\n    };\n\n  const _verifyEip155MessageSignature = (\n    message: string,\n    signature: string,\n    address: string\n  ) =>\n    utils.verifyMessage(message, signature).toLowerCase() ===\n    address.toLowerCase();\n\n  const ping = async () => {\n    if (typeof client === \"undefined\") {\n      throw new Error(\"WalletConnect is not initialized\");\n    }\n    if (typeof session === \"undefined\") {\n      throw new Error(\"Session is not connected\");\n    }\n\n    try {\n      setPending(true);\n\n      let valid = false;\n\n      try {\n        await client.ping({ topic: session.topic });\n        valid = true;\n      } catch (e) {\n        valid = false;\n      }\n\n      // display result\n      setResult({\n        method: \"ping\",\n        valid,\n        result: valid ? \"Ping succeeded\" : \"Ping failed\",\n      });\n    } catch (e) {\n      console.error(e);\n      setResult(null);\n    } finally {\n      setPending(false);\n    }\n  };\n\n  // -------- ETHEREUM/EIP155 RPC METHODS --------\n\n  const ethereumRpc = {\n    testSendTransaction: _createJsonRpcRequestHandler(\n      async (chainId: string, address: string) => {\n        const caipAccountAddress = `${chainId}:${address}`;\n        const account = accounts.find(\n          (account) => account === caipAccountAddress\n        );\n        if (account === undefined)\n          throw new Error(`Account for ${caipAccountAddress} not found`);\n\n        const tx = await formatTestTransaction(account);\n\n        const balance = BigNumber.from(balances[account][0].balance || \"0\");\n        if (balance.lt(BigNumber.from(tx.gasPrice).mul(tx.gasLimit))) {\n          return {\n            method: DEFAULT_EIP155_METHODS.ETH_SEND_TRANSACTION,\n            address,\n            valid: false,\n            result: \"Insufficient funds for intrinsic transaction cost\",\n          };\n        }\n\n        const result = await client!.request<string>({\n          topic: session!.topic,\n          chainId,\n          request: {\n            method: DEFAULT_EIP155_METHODS.ETH_SEND_TRANSACTION,\n            params: [tx],\n          },\n        });\n\n        // format displayed result\n        return {\n          method: DEFAULT_EIP155_METHODS.ETH_SEND_TRANSACTION,\n          address,\n          valid: true,\n          result,\n        };\n      }\n    ),\n    testSignTransaction: _createJsonRpcRequestHandler(\n      async (chainId: string, address: string) => {\n        const caipAccountAddress = `${chainId}:${address}`;\n        const account = accounts.find(\n          (account) => account === caipAccountAddress\n        );\n        if (account === undefined)\n          throw new Error(`Account for ${caipAccountAddress} not found`);\n\n        const tx = await formatTestTransaction(account);\n\n        const signedTx = await client!.request<string>({\n          topic: session!.topic,\n          chainId,\n          request: {\n            method: DEFAULT_EIP155_METHODS.ETH_SIGN_TRANSACTION,\n            params: [tx],\n          },\n        });\n\n        const valid = EthTransaction.fromSerializedTx(\n          signedTx as any\n        ).verifySignature();\n\n        return {\n          method: DEFAULT_EIP155_METHODS.ETH_SIGN_TRANSACTION,\n          address,\n          valid,\n          result: signedTx,\n        };\n      }\n    ),\n    testSignPersonalMessage: _createJsonRpcRequestHandler(\n      async (chainId: string, address: string) => {\n        // test message\n        const message = `My email is john@doe.com - ${Date.now()}`;\n\n        // encode message (hex)\n        const hexMsg = encoding.utf8ToHex(message, true);\n\n        // personal_sign params\n        const params = [hexMsg, address];\n\n        // send message\n        const signature = await client!.request<string>({\n          topic: session!.topic,\n          chainId,\n          request: {\n            method: DEFAULT_EIP155_METHODS.PERSONAL_SIGN,\n            params,\n          },\n        });\n\n        //  split chainId\n        const [namespace, reference] = chainId.split(\":\");\n\n        const targetChainData = chainData[namespace][reference];\n\n        if (typeof targetChainData === \"undefined\") {\n          throw new Error(`Missing chain data for chainId: ${chainId}`);\n        }\n\n        const valid = _verifyEip155MessageSignature(\n          message,\n          signature,\n          address\n        );\n\n        // format displayed result\n        return {\n          method: DEFAULT_EIP155_METHODS.PERSONAL_SIGN,\n          address,\n          valid,\n          result: signature,\n        };\n      }\n    ),\n    testEthSign: _createJsonRpcRequestHandler(\n      async (chainId: string, address: string) => {\n        // test message\n        const message = `My email is john@doe.com - ${Date.now()}`;\n        // encode message (hex)\n        const hexMsg = encoding.utf8ToHex(message, true);\n        // eth_sign params\n        const params = [address, hexMsg];\n\n        // send message\n        const signature = await client!.request<string>({\n          topic: session!.topic,\n          chainId,\n          request: {\n            method: DEFAULT_EIP155_METHODS.ETH_SIGN,\n            params,\n          },\n        });\n\n        //  split chainId\n        const [namespace, reference] = chainId.split(\":\");\n\n        const targetChainData = chainData[namespace][reference];\n\n        if (typeof targetChainData === \"undefined\") {\n          throw new Error(`Missing chain data for chainId: ${chainId}`);\n        }\n\n        const valid = _verifyEip155MessageSignature(\n          message,\n          signature,\n          address\n        );\n\n        // format displayed result\n        return {\n          method: DEFAULT_EIP155_METHODS.ETH_SIGN + \" (standard)\",\n          address,\n          valid,\n          result: signature,\n        };\n      }\n    ),\n    testSignTypedData: _createJsonRpcRequestHandler(\n      async (chainId: string, address: string) => {\n        const message = JSON.stringify(eip712.example);\n\n        // eth_signTypedData params\n        const params = [address, message];\n\n        // send message\n        const signature = await client!.request<string>({\n          topic: session!.topic,\n          chainId,\n          request: {\n            method: DEFAULT_EIP155_METHODS.ETH_SIGN_TYPED_DATA,\n            params,\n          },\n        });\n\n        // Separate `EIP712Domain` type from remaining types to verify, otherwise `ethers.utils.verifyTypedData`\n        // will throw due to \"unused\" `EIP712Domain` type.\n        // See: https://github.com/ethers-io/ethers.js/issues/687#issuecomment-714069471\n        const {\n          EIP712Domain,\n          ...nonDomainTypes\n        }: Record<string, TypedDataField[]> = eip712.example.types;\n\n        const valid =\n          utils\n            .verifyTypedData(\n              eip712.example.domain,\n              nonDomainTypes,\n              eip712.example.message,\n              signature\n            )\n            .toLowerCase() === address.toLowerCase();\n\n        return {\n          method: DEFAULT_EIP155_METHODS.ETH_SIGN_TYPED_DATA,\n          address,\n          valid,\n          result: signature,\n        };\n      }\n    ),\n  };\n\n  // -------- COSMOS RPC METHODS --------\n\n  const cosmosRpc = {\n    testSignDirect: _createJsonRpcRequestHandler(\n      async (chainId: string, address: string) => {\n        // test direct sign doc inputs\n        const inputs = {\n          fee: [{ amount: \"2000\", denom: \"ucosm\" }],\n          pubkey: \"AgSEjOuOr991QlHCORRmdE5ahVKeyBrmtgoYepCpQGOW\",\n          gasLimit: 200000,\n          accountNumber: 1,\n          sequence: 1,\n          bodyBytes:\n            \"0a90010a1c2f636f736d6f732e62616e6b2e763162657461312e4d736753656e6412700a2d636f736d6f7331706b707472653766646b6c366766727a6c65736a6a766878686c63337234676d6d6b38727336122d636f736d6f7331717970717870713971637273737a673270767871367273307a716733797963356c7a763778751a100a0575636f736d120731323334353637\",\n          authInfoBytes:\n            \"0a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21034f04181eeba35391b858633a765c4a0c189697b40d216354d50890d350c7029012040a020801180112130a0d0a0575636f736d12043230303010c09a0c\",\n        };\n\n        // split chainId\n        const [namespace, reference] = chainId.split(\":\");\n\n        // format sign doc\n        const signDoc = formatDirectSignDoc(\n          inputs.fee,\n          inputs.pubkey,\n          inputs.gasLimit,\n          inputs.accountNumber,\n          inputs.sequence,\n          inputs.bodyBytes,\n          reference\n        );\n\n        // cosmos_signDirect params\n        const params = {\n          signerAddress: address,\n          signDoc: stringifySignDocValues(signDoc),\n        };\n\n        // send message\n        const result = await client!.request<{ signature: string }>({\n          topic: session!.topic,\n          chainId,\n          request: {\n            method: DEFAULT_COSMOS_METHODS.COSMOS_SIGN_DIRECT,\n            params,\n          },\n        });\n\n        const targetChainData = chainData[namespace][reference];\n\n        if (typeof targetChainData === \"undefined\") {\n          throw new Error(`Missing chain data for chainId: ${chainId}`);\n        }\n\n        const valid = await verifyDirectSignature(\n          address,\n          result.signature,\n          signDoc\n        );\n\n        // format displayed result\n        return {\n          method: DEFAULT_COSMOS_METHODS.COSMOS_SIGN_DIRECT,\n          address,\n          valid,\n          result: result.signature,\n        };\n      }\n    ),\n    testSignAmino: _createJsonRpcRequestHandler(\n      async (chainId: string, address: string) => {\n        // split chainId\n        const [namespace, reference] = chainId.split(\":\");\n\n        // test amino sign doc\n        const signDoc = {\n          msgs: [],\n          fee: { amount: [], gas: \"23\" },\n          chain_id: \"foochain\",\n          memo: \"hello, world\",\n          account_number: \"7\",\n          sequence: \"54\",\n        };\n\n        // cosmos_signAmino params\n        const params = { signerAddress: address, signDoc };\n\n        // send message\n        const result = await client!.request<{ signature: string }>({\n          topic: session!.topic,\n          chainId,\n          request: {\n            method: DEFAULT_COSMOS_METHODS.COSMOS_SIGN_AMINO,\n            params,\n          },\n        });\n\n        const targetChainData = chainData[namespace][reference];\n\n        if (typeof targetChainData === \"undefined\") {\n          throw new Error(`Missing chain data for chainId: ${chainId}`);\n        }\n\n        const valid = await verifyAminoSignature(\n          address,\n          result.signature,\n          signDoc\n        );\n\n        // format displayed result\n        return {\n          method: DEFAULT_COSMOS_METHODS.COSMOS_SIGN_AMINO,\n          address,\n          valid,\n          result: result.signature,\n        };\n      }\n    ),\n  };\n\n  // -------- SOLANA RPC METHODS --------\n\n  const solanaRpc = {\n    testSignTransaction: _createJsonRpcRequestHandler(\n      async (\n        chainId: string,\n        address: string\n      ): Promise<IFormattedRpcResponse> => {\n        if (!solanaPublicKeys) {\n          throw new Error(\"Could not find Solana PublicKeys.\");\n        }\n\n        const senderPublicKey = solanaPublicKeys[address];\n\n        const connection = new Connection(\n          clusterApiUrl(isTestnet ? \"testnet\" : \"mainnet-beta\")\n        );\n\n        // Using deprecated `getRecentBlockhash` over `getLatestBlockhash` here, since `mainnet-beta`\n        // cluster only seems to support `connection.getRecentBlockhash` currently.\n        const { blockhash } = await connection.getRecentBlockhash();\n\n        const transaction = new SolanaTransaction({\n          feePayer: senderPublicKey,\n          recentBlockhash: blockhash,\n        }).add(\n          SystemProgram.transfer({\n            fromPubkey: senderPublicKey,\n            toPubkey: Keypair.generate().publicKey,\n            lamports: 1,\n          })\n        );\n\n        try {\n          const result = await client!.request<{ signature: string }>({\n            chainId,\n            topic: session!.topic,\n            request: {\n              method: DEFAULT_SOLANA_METHODS.SOL_SIGN_TRANSACTION,\n              params: {\n                feePayer: transaction.feePayer!.toBase58(),\n                recentBlockhash: transaction.recentBlockhash,\n                instructions: transaction.instructions.map((i) => ({\n                  programId: i.programId.toBase58(),\n                  data: bs58.encode(i.data),\n                  keys: i.keys.map((k) => ({\n                    isSigner: k.isSigner,\n                    isWritable: k.isWritable,\n                    pubkey: k.pubkey.toBase58(),\n                  })),\n                })),\n              },\n            },\n          });\n\n          // We only need `Buffer.from` here to satisfy the `Buffer` param type for `addSignature`.\n          // The resulting `UInt8Array` is equivalent to just `bs58.decode(...)`.\n          transaction.addSignature(\n            senderPublicKey,\n            Buffer.from(bs58.decode(result.signature))\n          );\n\n          const valid = transaction.verifySignatures();\n\n          return {\n            method: DEFAULT_SOLANA_METHODS.SOL_SIGN_TRANSACTION,\n            address,\n            valid,\n            result: result.signature,\n          };\n        } catch (error: any) {\n          throw new Error(error);\n        }\n      }\n    ),\n    testSignMessage: _createJsonRpcRequestHandler(\n      async (\n        chainId: string,\n        address: string\n      ): Promise<IFormattedRpcResponse> => {\n        if (!solanaPublicKeys) {\n          throw new Error(\"Could not find Solana PublicKeys.\");\n        }\n\n        const senderPublicKey = solanaPublicKeys[address];\n\n        // Encode message to `UInt8Array` first via `TextEncoder` so we can pass it to `bs58.encode`.\n        const message = bs58.encode(\n          new TextEncoder().encode(\n            `This is an example message to be signed - ${Date.now()}`\n          )\n        );\n\n        try {\n          const result = await client!.request<{ signature: string }>({\n            chainId,\n            topic: session!.topic,\n            request: {\n              method: DEFAULT_SOLANA_METHODS.SOL_SIGN_MESSAGE,\n              params: {\n                pubkey: senderPublicKey.toBase58(),\n                message,\n              },\n            },\n          });\n\n          const valid = verifyMessageSignature(\n            senderPublicKey.toBase58(),\n            result.signature,\n            message\n          );\n\n          return {\n            method: DEFAULT_SOLANA_METHODS.SOL_SIGN_MESSAGE,\n            address,\n            valid,\n            result: result.signature,\n          };\n        } catch (error: any) {\n          throw new Error(error);\n        }\n      }\n    ),\n  };\n\n  const polkadotRcp = {\n    testSignMessage: _createJsonRpcRequestHandler(\n      async (\n        chainId: string,\n        address: string\n      ): Promise<IFormattedRpcResponse> => {\n        try {\n          const result = await client!.request<{ signature: string }>({\n            chainId,\n            topic: session!.topic,\n            request: {\n              method: DEFAULT_POLKADOT_METHODS.POLKADOT_SIGN_MESSAGE,\n              params: {\n                pubKey: address,\n                message: \"This is a test message\",\n              },\n            },\n          });\n\n          return {\n            method: DEFAULT_POLKADOT_METHODS.POLKADOT_SIGN_MESSAGE,\n            address,\n            valid: true,\n            result: result.signature,\n          };\n        } catch (error: any) {\n          console.log(\"the error\", error);\n          throw new Error(error.message);\n        }\n      }\n    ),\n  };\n\n  return (\n    <JsonRpcContext.Provider\n      value={{\n        ping,\n        ethereumRpc,\n        cosmosRpc,\n        solanaRpc,\n        polkadotRcp,\n        rpcResult: result,\n        isRpcRequestPending: pending,\n        isTestnet,\n        setIsTestnet,\n      }}\n    >\n      {children}\n    </JsonRpcContext.Provider>\n  );\n}\n\nexport function useJsonRpc() {\n  const context = useContext(JsonRpcContext);\n  if (context === undefined) {\n    throw new Error(\"useJsonRpc must be used within a JsonRpcContextProvider\");\n  }\n  return context;\n}\n","import { ChainsMap } from \"caip-api\";\nimport { NamespaceMetadata, ChainMetadata } from \"../helpers\";\n\n// TODO: add `solana` namespace to `caip-api` package to avoid manual specification here.\nexport const SolanaChainData: ChainsMap = {\n  \"4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZ\": {\n    id: \"solana:4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZ\",\n    name: \"Solana Mainnet\",\n    rpc: [\"https://api.mainnet-beta.solana.com\", \"https://solana-api.projectserum.com\"],\n    slip44: 501,\n    testnet: false,\n  },\n  \"8E9rvCKLFQia2Y35HXjjpWzj8weVo44K\": {\n    id: \"solana:8E9rvCKLFQia2Y35HXjjpWzj8weVo44K\",\n    name: \"Solana Devnet\",\n    rpc: [\"https://api.devnet.solana.com\"],\n    slip44: 501,\n    testnet: true,\n  },\n};\n\nexport const SolanaMetadata: NamespaceMetadata = {\n  // Solana Mainnet\n  \"4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZ\": {\n    logo: \"/solana_logo.png\",\n    rgb: \"0, 0, 0\",\n  },\n  // Solana Devnet\n  \"8E9rvCKLFQia2Y35HXjjpWzj8weVo44K\": {\n    logo: \"/solana_logo.png\",\n    rgb: \"0, 0, 0\",\n  },\n};\n\nexport function getChainMetadata(chainId: string): ChainMetadata {\n  const reference = chainId.split(\":\")[1];\n  const metadata = SolanaMetadata[reference];\n  if (typeof metadata === \"undefined\") {\n    throw new Error(`No chain metadata found for chainId: ${chainId}`);\n  }\n  return metadata;\n}\n","export const DEFAULT_MAIN_CHAINS = [\n  // mainnets\n  // \"eip155:1\",\n  // \"eip155:10\",\n  // \"eip155:100\",\n  // \"eip155:137\",\n  // \"eip155:42161\",\n  // \"eip155:42220\",\n  // \"cosmos:cosmoshub-4\",\n  // \"solana:4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZ\",\n  \"polkadot:91b171bb158e2d3848fa23a9f1c25182\",\n];\n\nexport const DEFAULT_TEST_CHAINS = [\n  // testnets\n  // \"eip155:42\",\n  // \"eip155:69\",\n  // \"eip155:80001\",\n  // \"eip155:421611\",\n  // \"eip155:44787\",\n  // \"solana:8E9rvCKLFQia2Y35HXjjpWzj8weVo44K\",\n  \"polkadot:91b171bb158e2d3848fa23a9f1c25182\",\n];\n\nexport const DEFAULT_CHAINS = [...DEFAULT_MAIN_CHAINS, ...DEFAULT_TEST_CHAINS];\n\nexport const DEFAULT_PROJECT_ID = process.env.REACT_APP_PROJECT_ID;\n\nexport const DEFAULT_RELAY_URL = process.env.REACT_APP_RELAY_URL;\n\nexport const DEFAULT_LOGGER = \"debug\";\n\nexport const DEFAULT_APP_METADATA = {\n  name: \"React App\",\n  description: \"React App for WalletConnect\",\n  url: \"https://walletconnect.com/\",\n  icons: [\"https://avatars.githubusercontent.com/u/37784886\"],\n};\n\n/**\n * EIP155\n */\nexport enum DEFAULT_EIP155_METHODS {\n  ETH_SEND_TRANSACTION = \"eth_sendTransaction\",\n  ETH_SIGN_TRANSACTION = \"eth_signTransaction\",\n  ETH_SIGN = \"eth_sign\",\n  PERSONAL_SIGN = \"personal_sign\",\n  ETH_SIGN_TYPED_DATA = \"eth_signTypedData\",\n}\n\nexport enum DEFAULT_EIP_155_EVENTS {\n  ETH_CHAIN_CHANGED = \"chainChanged\",\n  ETH_ACCOUNTS_CHANGED = \"accountsChanged\",\n}\n\n/**\n * COSMOS\n */\nexport enum DEFAULT_COSMOS_METHODS {\n  COSMOS_SIGN_DIRECT = \"cosmos_signDirect\",\n  COSMOS_SIGN_AMINO = \"cosmos_signAmino\",\n}\n\nexport enum DEFAULT_COSMOS_EVENTS {}\n\n/**\n * SOLANA\n */\nexport enum DEFAULT_SOLANA_METHODS {\n  SOL_SIGN_TRANSACTION = \"solana_signTransaction\",\n  SOL_SIGN_MESSAGE = \"solana_signMessage\",\n}\n\nexport enum DEFAULT_SOLANA_EVENTS {}\n\n/**\n * POLKADOT\n */\nexport enum DEFAULT_POLKADOT_METHODS {\n  POLKADOT_SIGN_MESSAGE = \"sign_message\",\n}\n\nexport enum DEFAULT_POLKADOT_EVENTS {\n  POLKADOT_TEST_EVENT = 'polkadot_event_test'\n}\n","export const BLOCKCHAIN_LOGO_BASE_URL = \"https://blockchain-api.xyz/logos/\";\n","import axios, { AxiosInstance } from \"axios\";\nimport { AssetData, GasPrices, ParsedTx } from \"./types\";\n\nconst ethereumApi: AxiosInstance = axios.create({\n  baseURL: \"https://ethereum-api.xyz\",\n  timeout: 30000, // 30 secs\n  headers: {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n  },\n});\n\nexport async function apiGetAccountAssets(address: string, chainId: string): Promise<AssetData[]> {\n  const ethChainId = chainId.split(\":\")[1];\n  const response = await ethereumApi.get(\n    `/account-assets?address=${address}&chainId=${ethChainId}`,\n  );\n  const { result } = response.data;\n  return result;\n}\n\nexport async function apiGetAccountBalance(address: string, chainId: string): Promise<AssetData> {\n  const ethChainId = chainId.split(\":\")[1];\n  const response = await ethereumApi.get(\n    `/account-balance?address=${address}&chainId=${ethChainId}`,\n  );\n  const { result } = response.data;\n  return result;\n}\n\nexport async function apiGetAccountTransactions(\n  address: string,\n  chainId: string,\n): Promise<ParsedTx[]> {\n  const ethChainId = chainId.split(\":\")[1];\n  const response = await ethereumApi.get(\n    `/account-transactions?address=${address}&chainId=${ethChainId}`,\n  );\n  const { result } = response.data;\n  return result;\n}\n\nexport const apiGetAccountNonce = async (address: string, chainId: string): Promise<number> => {\n  const ethChainId = chainId.split(\":\")[1];\n  const response = await ethereumApi.get(`/account-nonce?address=${address}&chainId=${ethChainId}`);\n  const { result } = response.data;\n  return result;\n};\n\nexport const apiGetGasPrices = async (): Promise<GasPrices> => {\n  const response = await ethereumApi.get(`/gas-prices`);\n  const { result } = response.data;\n  return result;\n};\n","// From spec: https://eips.ethereum.org/EIPS/eip-712\nconst example = {\n  types: {\n    EIP712Domain: [\n      { name: \"name\", type: \"string\" },\n      { name: \"version\", type: \"string\" },\n      { name: \"chainId\", type: \"uint256\" },\n      { name: \"verifyingContract\", type: \"address\" },\n    ],\n    Person: [\n      { name: \"name\", type: \"string\" },\n      { name: \"wallet\", type: \"address\" },\n    ],\n    Mail: [\n      { name: \"from\", type: \"Person\" },\n      { name: \"to\", type: \"Person\" },\n      { name: \"contents\", type: \"string\" },\n    ],\n  },\n  primaryType: \"Mail\",\n  domain: {\n    name: \"Ether Mail\",\n    version: \"1\",\n    chainId: 1,\n    verifyingContract: \"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\",\n  },\n  message: {\n    from: { name: \"Cow\", wallet: \"0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826\" },\n    to: { name: \"Bob\", wallet: \"0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB\" },\n    contents: \"Hello, Bob!\",\n  },\n};\n\nexport const eip712 = {\n  example,\n};\n","import * as encoding from \"@walletconnect/encoding\";\n\nimport { apiGetAccountNonce, apiGetGasPrices } from \"./api\";\nimport { toWad } from \"./utilities\";\n\nexport async function getGasPrice(chainId: string): Promise<string> {\n  if (chainId === \"eip155:1\") return toWad(\"20\", 9).toHexString();\n  const gasPrices = await apiGetGasPrices();\n  return toWad(`${gasPrices.slow.price}`, 9).toHexString();\n}\n\nexport async function formatTestTransaction(account: string) {\n  const [namespace, reference, address] = account.split(\":\");\n  const chainId = `${namespace}:${reference}`;\n\n  let _nonce;\n  try {\n    _nonce = await apiGetAccountNonce(address, chainId);\n  } catch (error) {\n    throw new Error(`Failed to fetch nonce for address ${address} on chain ${chainId}`);\n  }\n\n  const nonce = encoding.sanitizeHex(encoding.numberToHex(_nonce));\n\n  // gasPrice\n  const _gasPrice = await getGasPrice(chainId);\n  const gasPrice = encoding.sanitizeHex(_gasPrice);\n\n  // gasLimit\n  const _gasLimit = 21000;\n  const gasLimit = encoding.sanitizeHex(encoding.numberToHex(_gasLimit));\n\n  // value\n  const _value = 0;\n  const value = encoding.sanitizeHex(encoding.numberToHex(_value));\n\n  const tx = { from: address, to: address, data: \"0x\", nonce, gasPrice, gasLimit, value };\n\n  return tx;\n}\n","export default __webpack_public_path__ + \"static/media/walletconnect.7e6bf370.png\";","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport logo from \"../assets/walletconnect.png\";\n\nconst SBannerWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  position: relative;\n`;\n\nconst SBanner = styled.div`\n  width: 275px;\n  height: 45px;\n  background: url(${logo}) no-repeat;\n  background-size: cover;\n  background-position: center;\n`;\n\nconst Banner = () => (\n  <SBannerWrapper>\n    <SBanner />\n  </SBannerWrapper>\n);\n\nexport default Banner;\n","import * as React from \"react\";\nimport * as PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\ninterface IconStyleProps {\n  size: number;\n}\n\nconst SIcon = styled.img<IconStyleProps>`\n  width: ${({ size }) => `${size}px`};\n  height: ${({ size }) => `${size}px`};\n`;\n\nconst Icon = (props: any) => {\n  const { src, fallback, size } = props;\n  return (\n    <SIcon\n      {...props}\n      src={src}\n      size={size}\n      onError={(event: any) => {\n        if (fallback) {\n          event.target.src = fallback;\n        }\n      }}\n    />\n  );\n};\n\nIcon.propTypes = {\n  src: PropTypes.string,\n  fallback: PropTypes.string,\n  size: PropTypes.number,\n};\n\nIcon.defaultProps = {\n  src: null,\n  fallback: \"\",\n  size: 20,\n};\n\nexport default Icon;\n","export default __webpack_public_path__ + \"static/media/eth.42a0a168.svg\";","export default __webpack_public_path__ + \"static/media/erc20.6540b4f4.svg\";","import { JsonRpcRequest } from \"@walletconnect/jsonrpc-utils\";\n\nimport {\n  NamespaceMetadata,\n  ChainMetadata,\n  ChainRequestRender,\n  convertHexToNumber,\n  convertHexToUtf8,\n} from \"../helpers\";\nimport { BLOCKCHAIN_LOGO_BASE_URL } from \"../constants\";\n\nexport const EIP155Colors = {\n  ethereum: \"99, 125, 234\",\n  optimism: \"233, 1, 1\",\n  goerli: \"189, 174, 155\",\n  xdai: \"73, 169, 166\",\n  polygon: \"130, 71, 229\",\n  celo: \"60, 203, 132\",\n  arbitrum: \"44, 55, 75\",\n};\n\nexport const EIP155Metadata: NamespaceMetadata = {\n  \"1\": {\n    name: \"Ethereum\",\n    logo: BLOCKCHAIN_LOGO_BASE_URL + \"eip155:1.png\",\n    rgb: EIP155Colors.ethereum,\n  },\n  \"5\": {\n    logo: BLOCKCHAIN_LOGO_BASE_URL + \"eip155:5.png\",\n    rgb: EIP155Colors.goerli,\n  },\n  \"10\": {\n    name: \"Optimism\",\n    logo: BLOCKCHAIN_LOGO_BASE_URL + \"eip155:10.png\",\n    rgb: EIP155Colors.optimism,\n  },\n  \"42\": {\n    logo: BLOCKCHAIN_LOGO_BASE_URL + \"eip155:42.png\",\n    rgb: EIP155Colors.ethereum,\n  },\n  \"69\": {\n    logo: BLOCKCHAIN_LOGO_BASE_URL + \"eip155:69.png\",\n    rgb: EIP155Colors.optimism,\n  },\n  \"100\": {\n    logo: BLOCKCHAIN_LOGO_BASE_URL + \"eip155:100.png\",\n    rgb: EIP155Colors.xdai,\n  },\n  \"137\": {\n    name: \"Polygon\",\n    logo: BLOCKCHAIN_LOGO_BASE_URL + \"eip155:137.png\",\n    rgb: EIP155Colors.polygon,\n  },\n  \"80001\": {\n    logo: BLOCKCHAIN_LOGO_BASE_URL + \"eip155:80001.png\",\n    rgb: EIP155Colors.polygon,\n  },\n  \"42161\": {\n    name: \"Arbitrum\",\n    logo: BLOCKCHAIN_LOGO_BASE_URL + \"eip155:42161.png\",\n    rgb: EIP155Colors.arbitrum,\n  },\n  \"42220\": {\n    name: \"Celo\",\n    logo: BLOCKCHAIN_LOGO_BASE_URL + \"eip155:42220.png\",\n    rgb: EIP155Colors.celo,\n  },\n  \"44787\": {\n    logo: BLOCKCHAIN_LOGO_BASE_URL + \"eip155:44787.png\",\n    rgb: EIP155Colors.celo,\n  },\n  \"421611\": {\n    logo: BLOCKCHAIN_LOGO_BASE_URL + \"eip155:421611.png\",\n    rgb: EIP155Colors.arbitrum,\n  },\n};\nexport function getChainMetadata(chainId: string): ChainMetadata {\n  const reference = chainId.split(\":\")[1];\n  const metadata = EIP155Metadata[reference];\n  if (typeof metadata === \"undefined\") {\n    throw new Error(`No chain metadata found for chainId: ${chainId}`);\n  }\n  return metadata;\n}\n\nexport function getChainRequestRender(request: JsonRpcRequest): ChainRequestRender[] {\n  let params = [{ label: \"Method\", value: request.method }];\n\n  switch (request.method) {\n    case \"eth_sendTransaction\":\n    case \"eth_signTransaction\":\n      params = [\n        ...params,\n        { label: \"From\", value: request.params[0].from },\n        { label: \"To\", value: request.params[0].to },\n        {\n          label: \"Gas Limit\",\n          value: request.params[0].gas\n            ? convertHexToNumber(request.params[0].gas)\n            : request.params[0].gasLimit\n            ? convertHexToNumber(request.params[0].gasLimit)\n            : \"\",\n        },\n        {\n          label: \"Gas Price\",\n          value: convertHexToNumber(request.params[0].gasPrice),\n        },\n        {\n          label: \"Nonce\",\n          value: convertHexToNumber(request.params[0].nonce),\n        },\n        {\n          label: \"Value\",\n          value: request.params[0].value ? convertHexToNumber(request.params[0].value) : \"\",\n        },\n        { label: \"Data\", value: request.params[0].data },\n      ];\n      break;\n\n    case \"eth_sign\":\n      params = [\n        ...params,\n        { label: \"Address\", value: request.params[0] },\n        { label: \"Message\", value: request.params[1] },\n      ];\n      break;\n    case \"personal_sign\":\n      params = [\n        ...params,\n        { label: \"Address\", value: request.params[1] },\n        {\n          label: \"Message\",\n          value: convertHexToUtf8(request.params[0]),\n        },\n      ];\n      break;\n    default:\n      params = [\n        ...params,\n        {\n          label: \"params\",\n          value: JSON.stringify(request.params, null, \"\\t\"),\n        },\n      ];\n      break;\n  }\n  return params;\n}\n","import { JsonRpcRequest } from \"@walletconnect/jsonrpc-utils\";\n\nimport { BLOCKCHAIN_LOGO_BASE_URL } from \"../constants\";\n\nimport { NamespaceMetadata, ChainMetadata, ChainRequestRender } from \"../helpers\";\n\nexport const CosmosMetadata: NamespaceMetadata = {\n  \"cosmoshub-4\": {\n    logo: BLOCKCHAIN_LOGO_BASE_URL + \"cosmos:cosmoshub-4.png\",\n    rgb: \"27, 31, 53\",\n  },\n};\n\nexport function getChainMetadata(chainId: string): ChainMetadata {\n  const reference = chainId.split(\":\")[1];\n  const metadata = CosmosMetadata[reference];\n  if (typeof metadata === \"undefined\") {\n    throw new Error(`No chain metadata found for chainId: ${chainId}`);\n  }\n  return metadata;\n}\n\nexport function getChainRequestRender(request: JsonRpcRequest): ChainRequestRender[] {\n  let params = [{ label: \"Method\", value: request.method }];\n\n  switch (request.method) {\n    default:\n      params = [\n        ...params,\n        {\n          label: \"params\",\n          value: JSON.stringify(request.params, null, \"\\t\"),\n        },\n      ];\n      break;\n  }\n  return params;\n}\n","import { JsonRpcRequest } from \"@walletconnect/jsonrpc-utils\";\nimport { BLOCKCHAIN_LOGO_BASE_URL } from \"../constants\";\n\nimport { NamespaceMetadata, ChainMetadata, ChainRequestRender } from \"../helpers\";\n\nexport const PolkadotMetadata: NamespaceMetadata = {\n  // eslint-disable-next-line no-useless-computed-key\n  [\"91b171bb158e2d3848fa23a9f1c25182\"]: {\n    logo: BLOCKCHAIN_LOGO_BASE_URL + \"polkadot:91b171bb158e2d3848fa23a9f1c25182.png\",\n    rgb: \"230, 1, 122\",\n  },\n};\n\nexport function getChainMetadata(chainId: string): ChainMetadata {\n  const reference = chainId.split(\":\")[1];\n  const metadata = PolkadotMetadata[reference];\n  if (typeof metadata === \"undefined\") {\n    throw new Error(`No chain metadata found for chainId: ${chainId}`);\n  }\n  return metadata;\n}\n\nexport function getChainRequestRender(request: JsonRpcRequest): ChainRequestRender[] {\n  let params = [{ label: \"Method\", value: request.method }];\n\n  switch (request.method) {\n    default:\n      params = [\n        ...params,\n        {\n          label: \"params\",\n          value: JSON.stringify(request.params, null, \"\\t\"),\n        },\n      ];\n      break;\n  }\n  return params;\n}\n","import { JsonRpcRequest } from \"@walletconnect/jsonrpc-utils\";\n\nimport * as eip155 from \"./eip155\";\nimport * as cosmos from \"./cosmos\";\nimport * as polkadot from \"./polkadot\";\nimport * as solana from \"./solana\";\n\nimport { ChainMetadata, ChainRequestRender } from \"../helpers\";\n\nexport function getChainMetadata(chainId: string): ChainMetadata {\n  const namespace = chainId.split(\":\")[0];\n  switch (namespace) {\n    case \"eip155\":\n      return eip155.getChainMetadata(chainId);\n    case \"cosmos\":\n      return cosmos.getChainMetadata(chainId);\n    case \"polkadot\":\n      return polkadot.getChainMetadata(chainId);\n    case \"solana\":\n      return solana.getChainMetadata(chainId);\n    default:\n      throw new Error(`No metadata handler for namespace ${namespace}`);\n  }\n}\n\nexport function getChainRequestRender(\n  request: JsonRpcRequest,\n  chainId: string,\n): ChainRequestRender[] {\n  const namespace = chainId.split(\":\")[0];\n  switch (namespace) {\n    case \"eip155\":\n      return eip155.getChainRequestRender(request);\n    case \"cosmos\":\n      return cosmos.getChainRequestRender(request);\n    case \"polkadot\":\n      return polkadot.getChainRequestRender(request);\n    default:\n      throw new Error(`No render handler for namespace ${namespace}`);\n  }\n}\n","import * as React from \"react\";\nimport styled from \"styled-components\";\n\nimport Icon from \"./Icon\";\n\nimport { AssetData, fromWad } from \"../helpers\";\n\nimport eth from \"../assets/eth.svg\";\nimport erc20 from \"../assets/erc20.svg\";\nimport { getChainMetadata } from \"../chains\";\n\nconst xdai = getChainMetadata(\"eip155:100\").logo;\nconst matic = getChainMetadata(\"eip155:137\").logo;\n\nconst SAsset = styled.div`\n  width: 100%;\n  padding: 20px;\n  display: flex;\n  justify-content: space-between;\n`;\nconst SAssetLeft = styled.div`\n  display: flex;\n`;\n\nconst SAssetName = styled.div`\n  display: flex;\n  margin-left: 10px;\n`;\n\nconst SAssetRight = styled.div`\n  display: flex;\n`;\n\nconst SAssetBalance = styled.div`\n  display: flex;\n`;\n\nfunction getAssetIcon(asset: AssetData): JSX.Element {\n  if (!!asset.contractAddress) {\n    const src = `https://raw.githubusercontent.com/TrustWallet/tokens/master/tokens/${asset.contractAddress.toLowerCase()}.png`;\n    return <Icon src={src} fallback={erc20} />;\n  }\n  switch (asset.symbol.toLowerCase()) {\n    case \"eth\":\n      return <Icon src={eth} />;\n    case \"xdai\":\n      return <Icon src={xdai} />;\n    case \"matic\":\n      return <Icon src={matic} />;\n    default:\n      return <Icon src={erc20} />;\n  }\n}\n\ninterface AssetProps {\n  asset: AssetData;\n}\n\nconst Asset = (props: AssetProps) => {\n  const { asset } = props;\n  return (\n    <SAsset {...props}>\n      <SAssetLeft>\n        {getAssetIcon(asset)}\n        <SAssetName>{asset.name}</SAssetName>\n      </SAssetLeft>\n      <SAssetRight>\n        <SAssetBalance>{`${fromWad(asset.balance || \"0\")} ${asset.symbol}`}</SAssetBalance>\n      </SAssetRight>\n    </SAsset>\n  );\n};\n\nexport default Asset;\n","export const colors: Record<string, string> = {\n  white: \"255, 255, 255\",\n  black: \"0, 0, 0\",\n  dark: \"12, 12, 13\",\n  grey: \"169, 169, 188\",\n  darkGrey: \"113, 119, 138\",\n  lightGrey: \"212, 212, 212\",\n  blue: \"101, 127, 230\",\n  lightBlue: \"64, 153, 255\",\n  yellow: \"250, 188, 45\",\n  orange: \"246, 133, 27\",\n  green: \"84, 209, 146\",\n  pink: \"255, 51, 102\",\n  red: \"214, 75, 71\",\n  purple: \"110, 107, 233\",\n};\n\nexport const fonts = {\n  size: {\n    tiny: \"10px\",\n    small: \"14px\",\n    medium: \"16px\",\n    large: \"18px\",\n    h1: \"60px\",\n    h2: \"50px\",\n    h3: \"40px\",\n    h4: \"32px\",\n    h5: \"24px\",\n    h6: \"20px\",\n  },\n  weight: {\n    normal: 400,\n    medium: 500,\n    semibold: 600,\n    bold: 700,\n    extrabold: 800,\n  },\n  family: {\n    OpenSans: `\"Open Sans\", sans-serif`,\n  },\n};\n\nexport const transitions = {\n  short: \"all 0.1s ease-in-out\",\n  base: \"all 0.2s ease-in-out\",\n  long: \"all 0.3s ease-in-out\",\n  button: \"all 0.15s ease-in-out\",\n};\n\nexport const shadows = {\n  soft: \"0 4px 6px 0 rgba(50, 50, 93, 0.11), 0 1px 3px 0 rgba(0, 0, 0, 0.08), inset 0 0 1px 0 rgba(0, 0, 0, 0.06)\",\n  medium:\n    \"0 3px 6px 0 rgba(0, 0, 0, 0.06), 0 0 1px 0 rgba(50, 50, 93, 0.02), 0 5px 10px 0 rgba(59, 59, 92, 0.08)\",\n  big: \"0 15px 35px 0 rgba(50, 50, 93, 0.06), 0 5px 15px 0 rgba(50, 50, 93, 0.15)\",\n  hover:\n    \"0 7px 14px 0 rgba(50, 50, 93, 0.1), 0 3px 6px 0 rgba(0, 0, 0, 0.08), inset 0 0 1px 0 rgba(0, 0, 0, 0.06)\",\n};\n\nexport const responsive = {\n  xs: {\n    min: \"min-width: 467px\",\n    max: \"max-width: 468px\",\n  },\n  sm: {\n    min: \"min-width: 639px\",\n    max: \"max-width: 640px\",\n  },\n  md: {\n    min: \"min-width: 959px\",\n    max: \"max-width: 960px\",\n  },\n  lg: {\n    min: \"min-width: 1023px\",\n    max: \"max-width: 1024px\",\n  },\n  xl: {\n    min: \"min-width: 1399px\",\n    max: \"max-width: 1400px\",\n  },\n};\n\nexport const globalStyle = `\n\n  html, body, #root {\n    height: 100%;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n  }\n\n  body {\n    font-family: ${fonts.family.OpenSans};\n    font-style: normal;\n    font-stretch: normal;\n    font-weight: ${fonts.weight.normal};\n    font-size: ${fonts.size.medium};\n    background-color: rgb(${colors.white});\n    color: rgb(${colors.dark});\n    overflow-y:auto;\n    text-rendering: optimizeLegibility;\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  \t-webkit-text-size-adjust: 100%;\n    -webkit-overflow-scrolling: touch;\n    -ms-text-size-adjust: 100%;\n    -webkit-text-size-adjust: 100%;  \n  }\n\n  button {\n    border-style: none;\n    line-height: 1em;\n    background-image: none;\n    outline: 0;\n    -webkit-box-shadow: none;\n            box-shadow: none;\n  }\n\n  [tabindex] {\n    outline: none;\n    width: 100%;\n    height: 100%;\n  }\n\n  a, p, h1, h2, h3, h4, h5, h6 {\n  \ttext-decoration: none;\n  \tmargin: 0;\n    padding: 0;\n    margin: 0.7em 0;\n  }\n\n  h1 {\n    font-size: ${fonts.size.h1}\n  }\n  h2 {\n    font-size: ${fonts.size.h2}\n  }\n  h3 {\n    font-size: ${fonts.size.h3}\n  }\n  h4 {\n    font-size: ${fonts.size.h4}\n  }\n  h5 {\n    font-size: ${fonts.size.h5}\n  }\n  h6 {\n    font-size: ${fonts.size.h6}\n  }\n\n  a {\n    background-color: transparent;\n    -webkit-text-decoration-skip: objects;  \n    text-decoration: none;\n    color: inherit;\n    outline: none;\n  }\n\n  b,\n  strong {\n    font-weight: inherit;\n    font-weight: bolder;\n  }\n\n  ul, li {\n  \tlist-style: none;\n  \tmargin: 0;\n  \tpadding: 0;\n  }\n\n  * {\n    box-sizing: border-box !important;\n  }\n\n\n  input {\n    -webkit-appearance: none;\n  }\n\n  article,\n  aside,\n  details,\n  figcaption,\n  figure,\n  footer,\n  header,\n  main,\n  menu,\n  nav,\n  section,\n  summary {\n    display: block;\n  }\n  audio,\n  canvas,\n  progress,\n  video {\n    display: inline-block;\n  }\n\n  input[type=\"color\"],\n  input[type=\"date\"],\n  input[type=\"datetime\"],\n  input[type=\"datetime-local\"],\n  input[type=\"email\"],\n  input[type=\"month\"],\n  input[type=\"number\"],\n  input[type=\"password\"],\n  input[type=\"search\"],\n  input[type=\"tel\"],\n  input[type=\"text\"],\n  input[type=\"time\"],\n  input[type=\"url\"],\n  input[type=\"week\"],\n  select:focus,\n  textarea {\n    font-size: 16px;\n  }\n`;\n","import * as React from \"react\";\nimport * as PropTypes from \"prop-types\";\nimport styled, { keyframes } from \"styled-components\";\nimport { colors } from \"../styles\";\n\nconst load = keyframes`\n  0% {\n    transform: scale(1.0);\n  }\n  5% {\n    transform: scale(1.0);\n  }\n  50% {\n    transform: scale(0.8);\n  }\n  95% {\n    transform: scale(1.0);\n  }\n  100% {\n    transform: scale(1.0);\n  }\n`;\n\ninterface LoaderStyleProps {\n  size: number;\n}\n\ninterface LoaderProps extends LoaderStyleProps {\n  color: string;\n  rgb?: string;\n}\n\nconst SLoader = styled.svg<LoaderStyleProps>`\n  width: ${({ size }) => `${size}px`};\n  height: ${({ size }) => `${size}px`};\n  animation: ${load} 1s infinite cubic-bezier(0.25, 0, 0.75, 1);\n  transform: translateZ(0);\n`;\n\nconst Loader = (props: LoaderProps) => {\n  const { size, color } = props;\n  const rgb = props.rgb || `rgb(${colors[color]})`;\n  return (\n    <SLoader viewBox=\"0 0 186 187\" size={size}>\n      <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\n        <path\n          d=\"M60,10.34375 C32.3857625,10.34375 10,32.7295125 10,60.34375 L10,126.34375 C10,153.957987 32.3857625,176.34375 60,176.34375 L126,176.34375 C153.614237,176.34375 176,153.957987 176,126.34375 L176,60.34375 C176,32.7295125 153.614237,10.34375 126,10.34375 L60,10.34375 Z M60,0.34375 L126,0.34375 C159.137085,0.34375 186,27.206665 186,60.34375 L186,126.34375 C186,159.480835 159.137085,186.34375 126,186.34375 L60,186.34375 C26.862915,186.34375 0,159.480835 0,126.34375 L0,60.34375 C0,27.206665 26.862915,0.34375 60,0.34375 Z\"\n          id=\"Rectangle-Copy\"\n          fill={rgb}\n          fillRule=\"nonzero\"\n        />\n        <rect id=\"Rectangle\" fill={rgb} x=\"44\" y=\"44.34375\" width=\"98\" height=\"98\" rx=\"35\" />\n      </g>\n    </SLoader>\n  );\n};\n\nLoader.propTypes = {\n  size: PropTypes.number,\n  color: PropTypes.string,\n};\n\nLoader.defaultProps = {\n  size: 40,\n  color: \"lightBlue\",\n};\n\nexport default Loader;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport Loader from \"./Loader\";\nimport { colors, fonts, shadows, transitions } from \"../styles\";\n\ninterface ButtonStyleProps {\n  fetching: boolean;\n  outline: boolean;\n  type: \"button\" | \"submit\" | \"reset\";\n  color: string;\n  disabled: boolean;\n  icon: any;\n  left: boolean;\n}\n\ninterface ButtonProps extends ButtonStyleProps {\n  children: React.ReactNode;\n  onClick?: any;\n}\n\nconst SIcon = styled.div`\n  position: absolute;\n  height: 15px;\n  width: 15px;\n  margin: 0 8px;\n  top: calc((100% - 15px) / 2);\n`;\n\nconst SHoverLayer = styled.div`\n  transition: ${transitions.button};\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  background-color: rgb(${colors.white}, 0.1);\n  top: 0;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  pointer-events: none;\n  opacity: 0;\n  visibility: hidden;\n`;\n\nconst SButton = styled.button<ButtonStyleProps>`\n  transition: ${transitions.button};\n  position: relative;\n  border: none;\n  border-style: none;\n  box-sizing: border-box;\n  background-color: ${({ outline, color }) => (outline ? \"transparent\" : `rgb(${colors[color]})`)};\n  border: ${({ outline, color }) => (outline ? `1px solid rgb(${colors[color]})` : \"none\")};\n  color: ${({ outline, color }) => (outline ? `rgb(${colors[color]})` : `rgb(${colors.white})`)};\n  box-shadow: ${({ outline }) => (outline ? \"none\" : `${shadows.soft}`)};\n  border-radius: 8px;\n  font-size: ${fonts.size.medium};\n  font-weight: ${fonts.weight.semibold};\n  padding: ${({ icon, left }) =>\n    icon ? (left ? \"7px 12px 8px 28px\" : \"7px 28px 8px 12px\") : \"8px 12px\"};\n  cursor: ${({ disabled }) => (disabled ? \"auto\" : \"pointer\")};\n  will-change: transform;\n\n  &:disabled {\n    opacity: 0.6;\n    box-shadow: ${({ outline }) => (outline ? \"none\" : `${shadows.soft}`)};\n  }\n\n  @media (hover: hover) {\n    &:hover {\n      transform: ${({ disabled }) => (!disabled ? \"translateY(-1px)\" : \"none\")};\n      box-shadow: ${({ disabled, outline }) =>\n        !disabled ? (outline ? \"none\" : `${shadows.hover}`) : `${shadows.soft}`};\n    }\n\n    &:hover ${SHoverLayer} {\n      opacity: 1;\n      visibility: visible;\n    }\n  }\n\n  &:active {\n    transform: ${({ disabled }) => (!disabled ? \"translateY(1px)\" : \"none\")};\n    box-shadow: ${({ outline }) => (outline ? \"none\" : `${shadows.soft}`)};\n    color: ${({ outline, color }) =>\n      outline ? `rgb(${colors[color]})` : `rgba(${colors.white}, 0.24)`};\n\n    & ${SIcon} {\n      opacity: 0.8;\n    }\n  }\n\n  & ${SIcon} {\n    right: ${({ left }) => (left ? \"auto\" : \"0\")};\n    left: ${({ left }) => (left ? \"0\" : \"auto\")};\n    display: ${({ icon }) => (icon ? \"block\" : \"none\")};\n    mask: ${({ icon }) => (icon ? `url(${icon}) center no-repeat` : \"none\")};\n    background-color: ${({ outline, color }) =>\n      outline ? `rgb(${colors[color]})` : `rgb(${colors.white})`};\n    transition: 0.15s ease;\n  }\n`;\n\nconst Button = (props: ButtonProps) => (\n  <SButton\n    {...props}\n    type={props.type}\n    outline={props.outline}\n    color={props.color}\n    disabled={props.disabled}\n    icon={props.icon}\n    left={props.left}\n  >\n    <SHoverLayer />\n    <SIcon />\n    {props.fetching ? <Loader size={20} color=\"white\" /> : props.children}\n  </SButton>\n);\n\nButton.defaultProps = {\n  fetching: false,\n  outline: false,\n  type: \"button\",\n  color: \"lightBlue\",\n  disabled: false,\n  icon: null,\n  left: false,\n};\n\nexport default Button;\n","import * as React from \"react\";\nimport * as PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\ninterface ColumnStyleProps {\n  spanHeight: boolean;\n  maxWidth: number;\n  center: boolean;\n}\n\ninterface ColumnProps extends ColumnStyleProps {\n  children: React.ReactNode;\n}\n\nconst SColumn = styled.div<ColumnStyleProps>`\n  position: relative;\n  width: 100%;\n  height: ${({ spanHeight }) => (spanHeight ? \"100%\" : \"auto\")};\n  max-width: ${({ maxWidth }) => `${maxWidth}px`};\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: ${({ center }) => (center ? \"center\" : \"flex-start\")};\n`;\n\nconst Column = (props: ColumnProps) => {\n  const { children, spanHeight, maxWidth, center } = props;\n  return (\n    <SColumn {...props} spanHeight={spanHeight} maxWidth={maxWidth} center={center}>\n      {children}\n    </SColumn>\n  );\n};\n\nColumn.propTypes = {\n  children: PropTypes.node.isRequired,\n  spanHeight: PropTypes.bool,\n  maxWidth: PropTypes.number,\n  center: PropTypes.bool,\n};\n\nColumn.defaultProps = {\n  spanHeight: false,\n  maxWidth: 600,\n  center: false,\n};\n\nexport default Column;\n","import React, { PropsWithChildren, FC } from \"react\";\nimport styled from \"styled-components\";\nimport { ChainData } from \"caip-api\";\n\nimport Asset from \"./Asset\";\nimport Button from \"./Button\";\nimport Column from \"./Column\";\nimport Loader from \"./Loader\";\n\nimport { getChainMetadata } from \"../chains\";\nimport {\n  AccountAction,\n  ellipseAddress,\n  AccountBalances,\n  ChainMetadata,\n  ChainNamespaces,\n} from \"../helpers\";\nimport { fonts } from \"../styles\";\n\ninterface AccountStyleProps {\n  rgb: string;\n}\n\nconst SAccount = styled.div<AccountStyleProps>`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  border-radius: 8px;\n  padding: 8px;\n  margin: 5px 0;\n  border: ${({ rgb }) => `2px solid rgb(${rgb})`};\n  &.active {\n    box-shadow: ${({ rgb }) => `0 0 8px rgb(${rgb})`};\n  }\n`;\n\nconst SChain = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  & p {\n    font-weight: 600;\n  }\n  & img {\n    border-radius: 50%;\n    width: 35px;\n    height: 35px;\n    margin-right: 10px;\n  }\n`;\n\nconst SContainer = styled.div`\n  height: 100%;\n  min-height: 200px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  word-break: break-word;\n`;\n\nconst SFullWidthContainer = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n`;\n\nconst SAction = styled(Button as any)`\n  border-radius: 8px;\n  font-size: ${fonts.size.medium};\n  height: 44px;\n  width: 100%;\n  margin: 12px 0;\n  background-color: ${({ rgb }) => `rgb(${rgb})`};\n`;\n\nconst SBlockchainChildrenContainer = styled(SFullWidthContainer)`\n  flex-direction: column;\n`;\n\ninterface BlockchainProps {\n  chainData: ChainNamespaces;\n  fetching?: boolean;\n  active?: boolean;\n  chainId: string;\n  address?: string;\n  onClick?: (chain: string) => void;\n  balances?: AccountBalances;\n  actions?: AccountAction[];\n}\n\ninterface BlockchainDisplayData {\n  data: ChainData;\n  meta: ChainMetadata;\n}\n\nfunction getBlockchainDisplayData(\n  chainId: string,\n  chainData: ChainNamespaces,\n): BlockchainDisplayData | undefined {\n  const [namespace, reference] = chainId.split(\":\");\n  let meta: ChainMetadata;\n  try {\n    meta = getChainMetadata(chainId);\n  } catch (e) {\n    return undefined;\n  }\n  const data: ChainData = chainData[namespace][reference];\n  if (typeof data === \"undefined\") return undefined;\n  return { data, meta };\n}\n\nconst Blockchain: FC<PropsWithChildren<BlockchainProps>> = (\n  props: PropsWithChildren<BlockchainProps>,\n) => {\n  const { chainData, fetching, chainId, address, onClick, active, balances, actions } = props;\n  if (!Object.keys(chainData).length) return null;\n\n  const chain = getBlockchainDisplayData(chainId, chainData);\n\n  if (typeof chain === \"undefined\") return null;\n\n  const name = chain.meta.name || chain.data.name;\n  const account = typeof address !== \"undefined\" ? `${chainId}:${address}` : undefined;\n  const assets =\n    typeof account !== \"undefined\" && typeof balances !== \"undefined\" ? balances[account] : [];\n  return (\n    <React.Fragment>\n      <SAccount\n        rgb={chain.meta.rgb}\n        onClick={() => onClick && onClick(props.chainId)}\n        className={active ? \"active\" : \"\"}\n      >\n        <SChain>\n          <img src={chain.meta.logo} alt={name} />\n          <p>{name}</p>\n        </SChain>\n        {!!address && <p>{ellipseAddress(address)}</p>}\n        <SBlockchainChildrenContainer>\n          {fetching ? (\n            <Column center>\n              <SContainer>\n                <Loader rgb={`rgb(${chain.meta.rgb})`} />\n              </SContainer>\n            </Column>\n          ) : (\n            <>\n              {!!assets && assets.length ? (\n                <SFullWidthContainer>\n                  <h6>Balances</h6>\n                  <Column center>\n                    {assets.map(asset => (\n                      <Asset key={asset.symbol} asset={asset} />\n                    ))}\n                  </Column>\n                </SFullWidthContainer>\n              ) : null}\n              {address && !!actions && actions.length ? (\n                <SFullWidthContainer>\n                  <h6>Methods</h6>\n                  {actions.map(action => (\n                    <SAction\n                      key={action.method}\n                      left\n                      rgb={chain.meta.rgb}\n                      onClick={() => action.callback(chainId, address)}\n                    >\n                      {action.method}\n                    </SAction>\n                  ))}\n                </SFullWidthContainer>\n              ) : null}\n            </>\n          )}\n        </SBlockchainChildrenContainer>\n      </SAccount>\n    </React.Fragment>\n  );\n};\nexport default Blockchain;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { SessionTypes } from \"@walletconnect/types\";\n\nimport { fonts, responsive } from \"../styles\";\nimport Button from \"./Button\";\n\nconst SHeader = styled.div`\n  margin-top: -1px;\n  margin-bottom: 1px;\n  width: 100%;\n  height: 100px;\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n  padding: 16px;\n  @media screen and (${responsive.sm.max}) {\n    font-size: ${fonts.size.small};\n  }\n`;\n\nconst SHeaderActions = styled.div`\n  display: flex;\n  & > button:first-child {\n    margin-right: 10px !important;\n  }\n`;\n\nconst SActiveAccount = styled.div`\n  display: flex;\n  align-items: center;\n  position: relative;\n  font-weight: 500;\n`;\n\nconst SActiveSession = styled(SActiveAccount as any)`\n  flex-direction: column;\n  text-align: left;\n  align-items: flex-start;\n  & p {\n    font-size: 0.8em;\n    margin: 0;\n    padding: 0;\n  }\n  & p:nth-child(n + 2) {\n    font-weight: bold;\n  }\n`;\n\ninterface HeaderProps {\n  ping: () => Promise<void>;\n  disconnect: () => Promise<void>;\n  session: SessionTypes.Struct | undefined;\n}\n\nconst Header = (props: HeaderProps) => {\n  const { ping, disconnect, session } = props;\n  return (\n    <SHeader {...props}>\n      {session ? (\n        <>\n          <SActiveSession>\n            <p>{`Connected to`}</p>\n            <p>{session.peer.metadata.name}</p>\n          </SActiveSession>\n          <SHeaderActions>\n            <Button outline color=\"black\" onClick={ping}>\n              {\"Ping\"}\n            </Button>\n            <Button outline color=\"red\" onClick={disconnect}>\n              {\"Disconnect\"}\n            </Button>\n          </SHeaderActions>\n        </>\n      ) : null}\n    </SHeader>\n  );\n};\n\nexport default Header;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { colors, transitions } from \"../styles\";\n\nconst SLightbox = styled.div<{\n  show: boolean;\n  offset: number;\n  opacity?: number;\n}>`\n  transition: opacity 0.1s ease-in-out;\n  text-align: center;\n  position: absolute;\n  width: 100vw;\n  height: 100%;\n  margin-left: -50vw;\n  top: ${({ offset }) => (offset ? `-${offset}px` : 0)};\n  left: 50%;\n  z-index: 2;\n  will-change: opacity;\n  background-color: ${({ opacity }) => {\n    let alpha = 0.4;\n    if (typeof opacity === \"number\") {\n      alpha = opacity;\n    }\n    return `rgba(0, 0, 0, ${alpha})`;\n  }};\n  opacity: ${({ show }) => (show ? 1 : 0)};\n  visibility: ${({ show }) => (show ? \"visible\" : \"hidden\")};\n  pointer-events: ${({ show }) => (show ? \"auto\" : \"none\")};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst SModalContainer = styled.div`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  padding: 15px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst SHitbox = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n`;\n\ninterface CloseButtonStyleProps {\n  size: number;\n  color: string;\n  onClick?: any;\n}\n\nconst SCloseButton = styled.div<CloseButtonStyleProps>`\n  transition: ${transitions.short};\n  position: absolute;\n  width: ${({ size }) => `${size}px`};\n  height: ${({ size }) => `${size}px`};\n  right: ${({ size }) => `${size / 1.6667}px`};\n  top: ${({ size }) => `${size / 1.6667}px`};\n  opacity: 0.5;\n  cursor: pointer;\n  &:hover {\n    opacity: 1;\n  }\n  &:before,\n  &:after {\n    position: absolute;\n    content: \" \";\n    height: ${({ size }) => `${size}px`};\n    width: 2px;\n    background: ${({ color }) => `rgb(${colors[color]})`};\n  }\n  &:before {\n    transform: rotate(45deg);\n  }\n  &:after {\n    transform: rotate(-45deg);\n  }\n`;\n\nconst SCard = styled.div`\n  position: relative;\n  width: 100%;\n  max-width: 500px;\n  padding: 25px;\n  background-color: rgb(${colors.white});\n  border-radius: 6px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst SModalContent = styled.div`\n  position: relative;\n  width: 100%;\n  position: relative;\n  word-wrap: break-word;\n`;\n\ninterface IProps {\n  children: React.ReactNode;\n  show: boolean;\n  closeModal: () => void;\n  opacity?: number;\n}\n\nexport default function Modal({ children, show, opacity, closeModal }: IProps) {\n  const [offset, setOffset] = useState(0);\n  const lightboxRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (lightboxRef.current) {\n      const lightboxRect = lightboxRef.current.getBoundingClientRect();\n      const nextOffset = lightboxRect.top > 0 ? lightboxRect.top : 0;\n\n      if (nextOffset !== 0 && nextOffset !== offset) {\n        setOffset(nextOffset);\n      }\n    }\n  }, [offset]);\n\n  return (\n    <SLightbox show={show} offset={offset} opacity={opacity} ref={lightboxRef}>\n      <SModalContainer>\n        <SHitbox onClick={closeModal} />\n\n        <SCard>\n          <SCloseButton size={25} color={\"dark\"} onClick={closeModal} />\n          <SModalContent>{children}</SModalContent>\n        </SCard>\n      </SModalContainer>\n    </SLightbox>\n  );\n}\n","import * as React from \"react\";\nimport * as PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nimport { colors, transitions } from \"../styles\";\n\ninterface IToggleStyleProps {\n  color: string;\n  active: boolean;\n}\n\nconst SToggle = styled.div<IToggleStyleProps>`\n  position: relative;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  transition: ${transitions.base};\n  & div {\n    transition: ${transitions.base};\n    appearance: none;\n    transition: all 0.3s ease;\n    box-shadow: ${({ active, color }) =>\n      active\n        ? `inset 0px 0px 0px 20px rgb(${colors[color]})`\n        : `inset 0px 0px 0px 1px rgb(${colors.grey})`};\n    border-radius: 1rem;\n    background-color: rgb(${colors.white});\n    padding: 1px;\n    display: inline-block;\n    width: 46px;\n    height: 26px;\n    position: relative;\n    cursor: pointer;\n    margin: 0px;\n    vertical-align: bottom;\n    outline: none;\n    border: none;\n  }\n  & div:after {\n    transition: ${transitions.base};\n    box-shadow: inset 0 1px 0 rgb(${colors.grey}), 0px 2px 2px 1px rgba(${colors.black}, 0.2);\n    border-radius: 1rem;\n    left: ${({ active }) => (active ? `20px` : `0`)};\n    content: \"\";\n    position: absolute;\n    width: 24px;\n    height: 24px;\n    cursor: pointer;\n    background-color: rgb(${colors.white});\n  }\n`;\n\ninterface IToggleProps extends IToggleStyleProps {\n  onClick?: any;\n}\n\nconst Toggle = (props: IToggleProps) => (\n  <SToggle color={props.color} active={props.active} onClick={props.onClick}>\n    <div />\n  </SToggle>\n);\n\nToggle.propTypes = {\n  active: PropTypes.bool,\n  color: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\nToggle.defaultProps = {\n  active: false,\n  color: \"green\",\n};\n\nexport default Toggle;\n","import styled from \"styled-components\";\n\nexport const SContainer = styled.div`\n  height: 100%;\n  min-height: 200px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  word-break: break-word;\n`;\n\nexport const STable = styled(SContainer as any)`\n  flex-direction: column;\n  text-align: left;\n`;\n\nexport const SRow = styled.div`\n  width: 100%;\n  display: flex;\n  margin: 6px 0;\n`;\n\nexport const SKey = styled.div`\n  width: 30%;\n  font-weight: 700;\n`;\n\nexport const SValue = styled.div`\n  width: 70%;\n  font-family: monospace;\n`;\n","import styled from \"styled-components\";\n\nexport const SModalContainer = styled.div`\n  width: 100%;\n  position: relative;\n  word-wrap: break-word;\n`;\n\nexport const SModalTitle = styled.div`\n  margin: 1em 0;\n  font-size: 20px;\n  font-weight: 700;\n`;\n\nexport const SModalParagraph = styled.p`\n  margin-top: 30px;\n`;\n","import * as React from \"react\";\n\nimport Loader from \"../components/Loader\";\nimport { SContainer, STable, SRow, SKey, SValue } from \"../components/shared\";\n\nimport { SModalContainer, SModalTitle, SModalParagraph } from \"./shared\";\n\ninterface RequestModalProps {\n  pending: boolean;\n  result: any;\n}\n\nconst RequestModal = (props: RequestModalProps) => {\n  const { pending, result } = props;\n  console.log(\"RESULT\", result);\n  return (\n    <>\n      {pending ? (\n        <SModalContainer>\n          <SModalTitle>{\"Pending JSON-RPC Request\"}</SModalTitle>\n          <SContainer>\n            <Loader />\n            <SModalParagraph>{\"Approve or reject request using your wallet\"}</SModalParagraph>\n          </SContainer>\n        </SModalContainer>\n      ) : result ? (\n        <SModalContainer>\n          <SModalTitle>\n            {result.valid ? \"JSON-RPC Request Approved\" : \"JSON-RPC Request Failed\"}\n          </SModalTitle>\n          <STable>\n            {Object.keys(result).map(\n              key =>\n                result[key] && (\n                  <SRow key={key}>\n                    <SKey>{key}</SKey>\n                    <SValue>{result[key].toString()}</SValue>\n                  </SRow>\n                ),\n            )}\n          </STable>\n        </SModalContainer>\n      ) : (\n        <SModalContainer>\n          <SModalTitle>{\"JSON-RPC Request Rejected\"}</SModalTitle>\n        </SModalContainer>\n      )}\n    </>\n  );\n};\n\nexport default RequestModal;\n","import { SignClientTypes } from \"@walletconnect/types\";\nimport * as React from \"react\";\nimport styled from \"styled-components\";\nimport { colors, fonts } from \"../styles\";\n\nconst SPeerOneLiner = styled.div`\n  display: flex;\n  align-items: center;\n  border-radius: 8px;\n  border: 2px solid rgb(${colors.darkGrey});\n  padding: 5px;\n\n  & img {\n    width: 40px;\n    height: 40px;\n  }\n  & > div {\n    margin-left: 10px;\n  }\n`;\n\nconst SPeerCard = styled.div`\n  align-items: center;\n  justify-content: center;\n  display: flex;\n  width: 100%;\n  flex-direction: column;\n  border-radius: 8px;\n  border: 2px solid rgb(${colors.darkGrey});\n  padding: 5px;\n  & > div {\n    margin: 4px auto;\n  }\n`;\n\nconst SIcon = styled.img`\n  width: 100px;\n  margin: 0 auto;\n`;\n\nconst SCenter = styled.div`\n  text-align: center;\n`;\n\nconst SUrl = styled(SCenter as any)`\n  font-size: ${fonts.size.small};\n  opacity: 0.8;\n`;\n\nconst SName = styled(SCenter as any)`\n  font-weight: bold;\n`;\n\ninterface PeerProps {\n  oneLiner?: boolean;\n  metadata: SignClientTypes.Metadata;\n}\n\nconst Peer = (props: PeerProps) =>\n  props.oneLiner ? (\n    <SPeerOneLiner>\n      <img src={props.metadata.icons[0]} alt={props.metadata.name} />\n      <div>{props.metadata.name}</div>\n    </SPeerOneLiner>\n  ) : (\n    <SPeerCard>\n      <SIcon src={props.metadata.icons[0]} alt={props.metadata.name} />\n      <SName>{props.metadata.name}</SName>\n      <SCenter>{props.metadata.description}</SCenter>\n      <SUrl>{props.metadata.url}</SUrl>\n    </SPeerCard>\n  );\n\nexport default Peer;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\n\nimport { PairingTypes } from \"@walletconnect/types\";\n\nimport Peer from \"./Peer\";\n\ninterface PairingProps {\n  pairing: PairingTypes.Struct;\n  onClick?: any;\n}\n\nconst SPairingContainer = styled.div`\n  width: 100%;\n  cursor: pointer;\n`;\n\nconst Pairing = (props: PairingProps) => {\n  const { peerMetadata } = props.pairing;\n  return (\n    <SPairingContainer onClick={props.onClick}>\n      <div>\n        {typeof peerMetadata !== \"undefined\" ? (\n          <Peer oneLiner metadata={peerMetadata} />\n        ) : (\n          <div>{`Unknown Wallet`}</div>\n        )}\n      </div>\n    </SPairingContainer>\n  );\n};\n\nexport default Pairing;\n","import * as React from \"react\";\n\nimport { PairingTypes } from \"@walletconnect/types\";\n\nimport Button from \"../components/Button\";\nimport Pairing from \"../components/Pairing\";\nimport { STable } from \"../components/shared\";\n\nimport { SModalContainer, SModalTitle } from \"./shared\";\n\ninterface PairingModalProps {\n  pairings: PairingTypes.Struct[];\n  connect: (pairing?: { topic: string }) => Promise<void>;\n}\n\nconst PairingModal = (props: PairingModalProps) => {\n  const { pairings, connect } = props;\n  return (\n    <SModalContainer>\n      <SModalTitle>{\"Select available pairing or create new one\"}</SModalTitle>\n      <STable>\n        {pairings.map(pairing => (\n          <Pairing\n            key={pairing.topic}\n            pairing={pairing}\n            onClick={() => connect({ topic: pairing.topic })}\n          />\n        ))}\n      </STable>\n      <Button onClick={() => connect()}>{`New Pairing`}</Button>\n    </SModalContainer>\n  );\n};\n\nexport default PairingModal;\n","import * as React from \"react\";\n\nimport Loader from \"../components/Loader\";\nimport { SContainer } from \"../components/shared\";\n\nimport { SModalContainer, SModalTitle } from \"./shared\";\n\ninterface PingModalProps {\n  pending: boolean;\n  result: any;\n}\n\nconst PingModal = (props: PingModalProps) => {\n  const { pending, result } = props;\n  return (\n    <>\n      {pending ? (\n        <SModalContainer>\n          <SModalTitle>{\"Pending Session Ping\"}</SModalTitle>\n          <SContainer>\n            <Loader />\n          </SContainer>\n        </SModalContainer>\n      ) : result ? (\n        <SModalContainer>\n          <SModalTitle>\n            {result.valid ? \"Successful Session Ping\" : \"Failed Session Ping\"}\n          </SModalTitle>\n        </SModalContainer>\n      ) : (\n        <SModalContainer>\n          <SModalTitle>{\"Unknown Error with Session Ping\"}</SModalTitle>\n        </SModalContainer>\n      )}\n    </>\n  );\n};\n\nexport default PingModal;\n","import * as React from \"react\";\nimport * as PropTypes from \"prop-types\";\nimport styled, { keyframes } from \"styled-components\";\n\nconst fadeIn = keyframes`\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n`;\n\ninterface WrapperStyleProps {\n  center: boolean;\n}\n\nconst SWrapper = styled.div<WrapperStyleProps>`\n  will-change: transform, opacity;\n  animation: ${fadeIn} 0.7s ease 0s normal 1;\n  min-height: 200px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: ${({ center }) => (center ? `center` : `flex-start`)};\n`;\n\ninterface WrapperProps extends WrapperStyleProps {\n  children: React.ReactNode;\n}\n\nconst Wrapper = (props: WrapperProps) => {\n  const { children, center } = props;\n  return (\n    <SWrapper {...props} center={center}>\n      {children}\n    </SWrapper>\n  );\n};\n\nWrapper.propTypes = {\n  children: PropTypes.node.isRequired,\n  center: PropTypes.bool,\n};\n\nWrapper.defaultProps = {\n  center: false,\n};\n\nexport default Wrapper;\n","import styled from \"styled-components\";\nimport { fonts } from \"../../styles\";\nimport Button from \"../Button\";\nimport Column from \"../Column\";\nimport Wrapper from \"../Wrapper\";\n\nexport const SLayout = styled.div`\n  position: relative;\n  width: 100%;\n  min-height: 100vh;\n  text-align: center;\n`;\n\nexport const SContent = styled(Wrapper as any)`\n  width: 100%;\n  height: 100%;\n  padding: 0 16px;\n`;\n\nexport const SLanding = styled(Column as any)`\n  /* height: 600px; */\n`;\n\nexport const SButtonContainer = styled(Column as any)`\n  width: 250px;\n  margin: 50px 0;\n`;\n\nexport const SConnectButton = styled(Button as any)`\n  border-radius: 8px;\n  font-size: ${fonts.size.medium};\n  height: 44px;\n  width: 100%;\n  margin: 12px 0;\n`;\n\nexport const SAccountsContainer = styled(SLanding as any)`\n  height: 100%;\n  padding-bottom: 30px;\n  & h3 {\n    padding-top: 30px;\n  }\n`;\n\nexport const SToggleContainer = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 10px auto;\n  & > p {\n    margin-right: 10px;\n  }\n`;\n\nexport const SFullWidthContainer = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n`;\n\nexport const SAccounts = styled(SFullWidthContainer)`\n  justify-content: space-between;\n  & > div {\n    margin: 12px 0;\n    flex: 1 0 100%;\n    @media (min-width: 648px) {\n      flex: 0 1 48%;\n    }\n  }\n`;\n","import React, { useEffect, useState } from \"react\";\nimport { version } from \"@walletconnect/sign-client/package.json\";\n\nimport Banner from \"./components/Banner\";\nimport Blockchain from \"./components/Blockchain\";\nimport Column from \"./components/Column\";\nimport Header from \"./components/Header\";\nimport Modal from \"./components/Modal\";\nimport {\n  DEFAULT_COSMOS_METHODS,\n  DEFAULT_EIP155_METHODS,\n  DEFAULT_MAIN_CHAINS,\n  DEFAULT_POLKADOT_METHODS,\n  DEFAULT_SOLANA_METHODS,\n  DEFAULT_TEST_CHAINS,\n} from \"./constants\";\nimport { AccountAction, setLocaleStorageTestnetFlag } from \"./helpers\";\nimport Toggle from \"./components/Toggle\";\nimport RequestModal from \"./modals/RequestModal\";\nimport PairingModal from \"./modals/PairingModal\";\nimport PingModal from \"./modals/PingModal\";\nimport {\n  SAccounts,\n  SAccountsContainer,\n  SButtonContainer,\n  SConnectButton,\n  SContent,\n  SLanding,\n  SLayout,\n  SToggleContainer,\n} from \"./components/app\";\nimport { useWalletConnectClient } from \"./contexts/ClientContext\";\nimport { useJsonRpc } from \"./contexts/JsonRpcContext\";\nimport { useChainData } from \"./contexts/ChainDataContext\";\n\nexport default function App() {\n  const [modal, setModal] = useState(\"\");\n\n  const closeModal = () => setModal(\"\");\n  const openPairingModal = () => setModal(\"pairing\");\n  const openPingModal = () => setModal(\"ping\");\n  const openRequestModal = () => setModal(\"request\");\n\n  // Initialize the WalletConnect client.\n  const {\n    client,\n    session,\n    connect,\n    disconnect,\n    chains,\n    accounts,\n    balances,\n    isFetchingBalances,\n    isInitializing,\n    setChains,\n  } = useWalletConnectClient();\n\n  // Use `JsonRpcContext` to provide us with relevant RPC methods and states.\n  const {\n    ping,\n    ethereumRpc,\n    cosmosRpc,\n    solanaRpc,\n    polkadotRcp,\n    isRpcRequestPending,\n    rpcResult,\n    isTestnet,\n    setIsTestnet,\n  } = useJsonRpc();\n\n  const { chainData } = useChainData();\n\n  // Close the pairing modal after a session is established.\n  useEffect(() => {\n    if (session && modal === \"pairing\") {\n      closeModal();\n    }\n  }, [session, modal]);\n\n  const onConnect = () => {\n    if (typeof client === \"undefined\") {\n      throw new Error(\"WalletConnect is not initialized\");\n    }\n    // Suggest existing pairings (if any).\n    if (client.pairing.values.length) {\n      openPairingModal();\n    } else {\n      // If no existing pairings are available, trigger `WalletConnectClient.connect`.\n      connect();\n    }\n  };\n\n  const onPing = async () => {\n    openPingModal();\n    await ping();\n  };\n\n  const getEthereumActions = (): AccountAction[] => {\n    const onSendTransaction = async (chainId: string, address: string) => {\n      openRequestModal();\n      await ethereumRpc.testSendTransaction(chainId, address);\n    };\n    const onSignTransaction = async (chainId: string, address: string) => {\n      openRequestModal();\n      await ethereumRpc.testSignTransaction(chainId, address);\n    };\n    const onSignPersonalMessage = async (chainId: string, address: string) => {\n      openRequestModal();\n      await ethereumRpc.testSignPersonalMessage(chainId, address);\n    };\n    const onEthSign = async (chainId: string, address: string) => {\n      openRequestModal();\n      await ethereumRpc.testEthSign(chainId, address);\n    };\n    const onSignTypedData = async (chainId: string, address: string) => {\n      openRequestModal();\n      await ethereumRpc.testSignTypedData(chainId, address);\n    };\n\n    return [\n      { method: DEFAULT_EIP155_METHODS.ETH_SEND_TRANSACTION, callback: onSendTransaction },\n      { method: DEFAULT_EIP155_METHODS.ETH_SIGN_TRANSACTION, callback: onSignTransaction },\n      { method: DEFAULT_EIP155_METHODS.PERSONAL_SIGN, callback: onSignPersonalMessage },\n      { method: DEFAULT_EIP155_METHODS.ETH_SIGN + \" (standard)\", callback: onEthSign },\n      { method: DEFAULT_EIP155_METHODS.ETH_SIGN_TYPED_DATA, callback: onSignTypedData },\n    ];\n  };\n\n  const getCosmosActions = (): AccountAction[] => {\n    const onSignDirect = async (chainId: string, address: string) => {\n      openRequestModal();\n      await cosmosRpc.testSignDirect(chainId, address);\n    };\n    const onSignAmino = async (chainId: string, address: string) => {\n      openRequestModal();\n      await cosmosRpc.testSignAmino(chainId, address);\n    };\n    return [\n      { method: DEFAULT_COSMOS_METHODS.COSMOS_SIGN_DIRECT, callback: onSignDirect },\n      { method: DEFAULT_COSMOS_METHODS.COSMOS_SIGN_AMINO, callback: onSignAmino },\n    ];\n  };\n\n  const getSolanaActions = (): AccountAction[] => {\n    const onSignTransaction = async (chainId: string, address: string) => {\n      openRequestModal();\n      await solanaRpc.testSignTransaction(chainId, address);\n    };\n    const onSignMessage = async (chainId: string, address: string) => {\n      openRequestModal();\n      await solanaRpc.testSignMessage(chainId, address);\n    };\n    return [\n      { method: DEFAULT_SOLANA_METHODS.SOL_SIGN_TRANSACTION, callback: onSignTransaction },\n      { method: DEFAULT_SOLANA_METHODS.SOL_SIGN_MESSAGE, callback: onSignMessage },\n    ];\n  };\n\n  const getPolkadotActions = (): AccountAction[] => {\n    const onSignMessage = async (chainId: string, address: string) => {\n      console.log('chainID', chainId);\n      openRequestModal();\n      await polkadotRcp.testSignMessage(chainId, address);\n    };\n    return [\n      { method: DEFAULT_POLKADOT_METHODS.POLKADOT_SIGN_MESSAGE, callback: onSignMessage },\n    ];\n  };\n\n  const getBlockchainActions = (chainId: string) => {\n    const [namespace] = chainId.split(\":\");\n    switch (namespace) {\n      case \"eip155\":\n        return getEthereumActions();\n      case \"cosmos\":\n        return getCosmosActions();\n      case \"solana\":\n        return getSolanaActions();\n      case \"polkadot\":\n        return getPolkadotActions();\n      default:\n        break;\n    }\n  };\n\n  // Toggle between displaying testnet or mainnet chains as selection options.\n  const toggleTestnets = () => {\n    const nextIsTestnetState = !isTestnet;\n    setIsTestnet(nextIsTestnetState);\n    setLocaleStorageTestnetFlag(nextIsTestnetState);\n  };\n\n  const handleChainSelectionClick = (chainId: string) => {\n    if (chains.includes(chainId)) {\n      setChains(chains.filter(chain => chain !== chainId));\n    } else {\n      setChains([...chains, chainId]);\n    }\n  };\n\n  // Renders the appropriate model for the given request that is currently in-flight.\n  const renderModal = () => {\n    switch (modal) {\n      case \"pairing\":\n        if (typeof client === \"undefined\") {\n          throw new Error(\"WalletConnect is not initialized\");\n        }\n        return <PairingModal pairings={client.pairing.values} connect={connect} />;\n      case \"request\":\n        return <RequestModal pending={isRpcRequestPending} result={rpcResult} />;\n      case \"ping\":\n        return <PingModal pending={isRpcRequestPending} result={rpcResult} />;\n      default:\n        return null;\n    }\n  };\n\n  const renderContent = () => {\n    const chainOptions = isTestnet ? DEFAULT_TEST_CHAINS : DEFAULT_MAIN_CHAINS;\n    return !accounts.length && !Object.keys(balances).length ? (\n      <SLanding center>\n        <Banner />\n        <h6>{`Using v${version || \"2.0.0-beta\"}`}</h6>\n        <SButtonContainer>\n          <h6>Select chains:</h6>\n          <SToggleContainer>\n            <p>Testnets Only?</p>\n            <Toggle active={isTestnet} onClick={toggleTestnets} />\n          </SToggleContainer>\n          {chainOptions.map(chainId => (\n            <Blockchain\n              key={chainId}\n              chainId={chainId}\n              chainData={chainData}\n              onClick={handleChainSelectionClick}\n              active={chains.includes(chainId)}\n            />\n          ))}\n          <SConnectButton left onClick={onConnect} disabled={!chains.length}>\n            {\"Connect\"}\n          </SConnectButton>\n        </SButtonContainer>\n      </SLanding>\n    ) : (\n      <SAccountsContainer>\n        <h3>Accounts</h3>\n        <SAccounts>\n          {accounts.map(account => {\n            const [namespace, reference, address] = account.split(\":\");\n            const chainId = `${namespace}:${reference}`;\n            return (\n              <Blockchain\n                key={account}\n                active={true}\n                chainData={chainData}\n                fetching={isFetchingBalances}\n                address={address}\n                chainId={chainId}\n                balances={balances}\n                actions={getBlockchainActions(chainId)}\n              />\n            );\n          })}\n        </SAccounts>\n      </SAccountsContainer>\n    );\n  };\n\n  return (\n    <SLayout>\n      <Column maxWidth={1000} spanHeight>\n        <Header ping={onPing} disconnect={disconnect} session={session} />\n        <SContent>{isInitializing ? \"Loading...\" : renderContent()}</SContent>\n      </Column>\n      <Modal show={!!modal} closeModal={closeModal}>\n        {renderModal()}\n      </Modal>\n    </SLayout>\n  );\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { createGlobalStyle } from \"styled-components\";\n\nimport { ClientContextProvider } from \"./contexts/ClientContext\";\nimport { JsonRpcContextProvider } from \"./contexts/JsonRpcContext\";\nimport { ChainDataContextProvider } from \"./contexts/ChainDataContext\";\n\nimport App from \"./App\";\nimport { globalStyle } from \"./styles\";\nconst GlobalStyle = createGlobalStyle`\n  ${globalStyle}\n`;\n\ndeclare global {\n  // tslint:disable-next-line\n  interface Window {\n    blockies: any;\n  }\n}\n\nReactDOM.render(\n  <>\n    <GlobalStyle />\n    <ChainDataContextProvider>\n      <ClientContextProvider>\n        <JsonRpcContextProvider>\n          <App />\n        </JsonRpcContextProvider>\n      </ClientContextProvider>\n    </ChainDataContextProvider>\n  </>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}